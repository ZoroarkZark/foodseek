{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeIconAPI = exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;\nexports.default = createIconSet;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ensureNativeModuleAvailable = _interopRequireDefault(require(\"./ensure-native-module-available\"));\n\nvar _createIconSourceCache = _interopRequireDefault(require(\"./create-icon-source-cache\"));\n\nvar _iconButton = _interopRequireDefault(require(\"./icon-button\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\@expo\\\\vector-icons\\\\build\\\\vendor\\\\react-native-vector-icons\\\\lib\\\\create-icon-set.js\";\nvar _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;\nexports.NativeIconAPI = NativeIconAPI;\nvar DEFAULT_ICON_SIZE = 12;\nexports.DEFAULT_ICON_SIZE = DEFAULT_ICON_SIZE;\nvar DEFAULT_ICON_COLOR = 'black';\nexports.DEFAULT_ICON_COLOR = DEFAULT_ICON_COLOR;\n\nfunction createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n\n  var fontReference = _reactNative.Platform.select({\n    windows: \"/Assets/\" + fontFile + \"#\" + fontFamily,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n\n  var Icon = function (_PureComponent) {\n    (0, _inherits2.default)(Icon, _PureComponent);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.root = null;\n\n      _this.handleRef = function (ref) {\n        _this.root = ref;\n      };\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            children = _this$props.children,\n            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCodePoint(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return _react.default.createElement(_reactNative.Text, (0, _extends2.default)({\n          selectable: false\n        }, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 9\n          }\n        }), glyph, children);\n      }\n    }]);\n    return Icon;\n  }(_react.PureComponent);\n\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = (0, _createIconSourceCache.default)();\n\n  function resolveGlyph(name) {\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n\n    return glyph;\n  }\n\n  function getImageSourceSync(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    (0, _ensureNativeModuleAvailable.default)();\n    var glyph = resolveGlyph(name);\n    var processedColor = (0, _reactNative.processColor)(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n\n    try {\n      var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n      var value = {\n        uri: imagePath,\n        scale: _reactNative.PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  function getImageSource(_x) {\n    return _getImageSource.apply(this, arguments);\n  }\n\n  function _getImageSource() {\n    _getImageSource = (0, _asyncToGenerator2.default)(function* (name) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n      (0, _ensureNativeModuleAvailable.default)();\n      var glyph = resolveGlyph(name);\n      var processedColor = (0, _reactNative.processColor)(color);\n      var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n      if (imageSourceCache.has(cacheKey)) {\n        return imageSourceCache.get(cacheKey);\n      }\n\n      try {\n        var imagePath = yield NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);\n        var value = {\n          uri: imagePath,\n          scale: _reactNative.PixelRatio.get()\n        };\n        imageSourceCache.setValue(cacheKey, value);\n        return value;\n      } catch (error) {\n        imageSourceCache.setError(cacheKey, error);\n        throw error;\n      }\n    });\n    return _getImageSource.apply(this, arguments);\n  }\n\n  function loadFont() {\n    return _loadFont.apply(this, arguments);\n  }\n\n  function _loadFont() {\n    _loadFont = (0, _asyncToGenerator2.default)(function* () {\n      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n      if (_reactNative.Platform.OS === 'ios') {\n        (0, _ensureNativeModuleAvailable.default)();\n\n        if (!file) {\n          throw new Error('Unable to load font, because no file was specified. ');\n        }\n\n        yield NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));\n      }\n    });\n    return _loadFont.apply(this, arguments);\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = (0, _iconButton.default)(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"names":["NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","PureComponent","defaultProps","allowFontScaling","imageSourceCache","resolveGlyph","getImageSourceSync","processedColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","OS","Error","loadFontWithFileName","split","hasIcon","Object","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;;;;;;;;;;;;AAEO,IAAMA,aAAa,GACxBC,2BAAcC,oBAAd,IAAsCD,2BAAcE,mBAD/C;;AAGA,IAAMC,iBAAiB,GAAG,EAA1B;;AACA,IAAMC,kBAAkB,GAAG,OAA3B;;;AAEQ,SAASC,aAAT,CACbC,QADa,EAEbC,UAFa,EAGbC,QAHa,EAIbC,SAJa,EAKb;AAEA,MAAMC,YAAY,GAAGF,QAAQ,GACzBA,QAAQ,CAACG,OAAT,CAAiB,cAAjB,EAAiC,EAAjC,CADyB,GAEzBJ,UAFJ;;AAIA,MAAMK,aAAa,GAAGC,sBAASC,MAAT,CAAgB;AACpCC,IAAAA,OAAO,eAAaP,QAAb,SAAyBD,UADI;AAEpCS,IAAAA,OAAO,EAAEN,YAF2B;AAGpCO,IAAAA,GAAG,EAAEP,YAH+B;AAIpCQ,IAAAA,OAAO,EAAEX;AAJ2B,GAAhB,CAAtB;;AANA,MAaMY,IAbN;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YAcEC,IAdF,GAcS,IAdT;;AAAA,YA2BEC,SA3BF,GA2Bc,UAAAC,GAAG,EAAI;AACjB,cAAKF,IAAL,GAAYE,GAAZ;AACD,OA7BH;;AAAA;AAAA;;AAAA;AAAA;AAAA,aAqBE,wBAAeC,WAAf,EAA4B;AAC1B,YAAI,KAAKH,IAAT,EAAe;AACb,eAAKA,IAAL,CAAUI,cAAV,CAAyBD,WAAzB;AACD;AACF;AAzBH;AAAA;AAAA,aA+BE,kBAAS;AACP,0BAAyD,KAAKE,KAA9D;AAAA,YAAQC,IAAR,eAAQA,IAAR;AAAA,YAAcC,IAAd,eAAcA,IAAd;AAAA,YAAoBC,KAApB,eAAoBA,KAApB;AAAA,YAA2BC,KAA3B,eAA2BA,KAA3B;AAAA,YAAkCC,QAAlC,eAAkCA,QAAlC;AAAA,YAA+CL,KAA/C;AAEA,YAAIM,KAAK,GAAGL,IAAI,GAAGpB,QAAQ,CAACoB,IAAD,CAAR,IAAkB,GAArB,GAA2B,EAA3C;;AACA,YAAI,OAAOK,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,UAAAA,KAAK,GAAGC,MAAM,CAACC,aAAP,CAAqBF,KAArB,CAAR;AACD;;AAED,YAAMG,aAAa,GAAG;AACpBC,UAAAA,QAAQ,EAAER,IADU;AAEpBC,UAAAA,KAAK,EAALA;AAFoB,SAAtB;AAKA,YAAMQ,cAAc,GAAG;AACrB7B,UAAAA,UAAU,EAAEK,aADS;AAErByB,UAAAA,UAAU,EAAE,QAFS;AAGrB5B,UAAAA,SAAS,EAAE;AAHU,SAAvB;AAMAgB,QAAAA,KAAK,CAACI,KAAN,GAAc,CAACK,aAAD,EAAgBL,KAAhB,EAAuBO,cAAvB,EAAuC3B,SAAS,IAAI,EAApD,CAAd;AACAgB,QAAAA,KAAK,CAACH,GAAN,GAAY,KAAKD,SAAjB;AAEA,eACE,6BAAC,iBAAD;AAAM,UAAA,UAAU,EAAE;AAAlB,WAA6BI,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACGM,KADH,EAEGD,QAFH,CADF;AAMD;AA3DH;AAAA;AAAA,IAamBQ,oBAbnB;;AAaMnB,EAAAA,IAbN,CAgBSoB,YAhBT,GAgBwB;AACpBZ,IAAAA,IAAI,EAAExB,iBADc;AAEpBqC,IAAAA,gBAAgB,EAAE;AAFE,GAhBxB;AA8DA,MAAMC,gBAAgB,GAAG,qCAAzB;;AAEA,WAASC,YAAT,CAAsBhB,IAAtB,EAA4B;AAC1B,QAAMK,KAAK,GAAGzB,QAAQ,CAACoB,IAAD,CAAR,IAAkB,GAAhC;;AACA,QAAI,OAAOK,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOC,MAAM,CAACC,aAAP,CAAqBF,KAArB,CAAP;AACD;;AACD,WAAOA,KAAP;AACD;;AAED,WAASY,kBAAT,CACEjB,IADF,EAIE;AAAA,QAFAC,IAEA,uEAFOxB,iBAEP;AAAA,QADAyB,KACA,uEADQxB,kBACR;AACA;AAEA,QAAM2B,KAAK,GAAGW,YAAY,CAAChB,IAAD,CAA1B;AACA,QAAMkB,cAAc,GAAG,+BAAahB,KAAb,CAAvB;AACA,QAAMiB,QAAQ,GAAMd,KAAN,SAAeJ,IAAf,SAAuBiB,cAArC;;AAEA,QAAIH,gBAAgB,CAACK,GAAjB,CAAqBD,QAArB,CAAJ,EAAoC;AAClC,aAAOJ,gBAAgB,CAACM,GAAjB,CAAqBF,QAArB,CAAP;AACD;;AACD,QAAI;AACF,UAAMG,SAAS,GAAGjD,aAAa,CAACkD,mBAAd,CAChBrC,aADgB,EAEhBmB,KAFgB,EAGhBJ,IAHgB,EAIhBiB,cAJgB,CAAlB;AAMA,UAAMM,KAAK,GAAG;AAAEC,QAAAA,GAAG,EAAEH,SAAP;AAAkBI,QAAAA,KAAK,EAAEC,wBAAWN,GAAX;AAAzB,OAAd;AACAN,MAAAA,gBAAgB,CAACa,QAAjB,CAA0BT,QAA1B,EAAoCK,KAApC;AACA,aAAOA,KAAP;AACD,KAVD,CAUE,OAAOK,KAAP,EAAc;AACdd,MAAAA,gBAAgB,CAACe,QAAjB,CAA0BX,QAA1B,EAAoCU,KAApC;AACA,YAAMA,KAAN;AACD;AACF;;AApGD,WAsGeE,cAtGf;AAAA;AAAA;;AAAA;AAAA,sDAsGA,WACE/B,IADF,EAIE;AAAA,UAFAC,IAEA,uEAFOxB,iBAEP;AAAA,UADAyB,KACA,uEADQxB,kBACR;AACA;AAEA,UAAM2B,KAAK,GAAGW,YAAY,CAAChB,IAAD,CAA1B;AACA,UAAMkB,cAAc,GAAG,+BAAahB,KAAb,CAAvB;AACA,UAAMiB,QAAQ,GAAMd,KAAN,SAAeJ,IAAf,SAAuBiB,cAArC;;AAEA,UAAIH,gBAAgB,CAACK,GAAjB,CAAqBD,QAArB,CAAJ,EAAoC;AAClC,eAAOJ,gBAAgB,CAACM,GAAjB,CAAqBF,QAArB,CAAP;AACD;;AACD,UAAI;AACF,YAAMG,SAAS,SAASjD,aAAa,CAAC2D,eAAd,CACtB9C,aADsB,EAEtBmB,KAFsB,EAGtBJ,IAHsB,EAItBiB,cAJsB,CAAxB;AAMA,YAAMM,KAAK,GAAG;AAAEC,UAAAA,GAAG,EAAEH,SAAP;AAAkBI,UAAAA,KAAK,EAAEC,wBAAWN,GAAX;AAAzB,SAAd;AACAN,QAAAA,gBAAgB,CAACa,QAAjB,CAA0BT,QAA1B,EAAoCK,KAApC;AACA,eAAOA,KAAP;AACD,OAVD,CAUE,OAAOK,KAAP,EAAc;AACdd,QAAAA,gBAAgB,CAACe,QAAjB,CAA0BX,QAA1B,EAAoCU,KAApC;AACA,cAAMA,KAAN;AACD;AACF,KAlID;AAAA;AAAA;;AAAA,WAoIeI,QApIf;AAAA;AAAA;;AAAA;AAAA,gDAoIA,aAAyC;AAAA,UAAjBC,IAAiB,uEAAVpD,QAAU;;AACvC,UAAIK,sBAASgD,EAAT,KAAgB,KAApB,EAA2B;AACzB;;AACA,YAAI,CAACD,IAAL,EAAW;AACT,gBAAM,IAAIE,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,cAAM/D,aAAa,CAACgE,oBAAd,OAAAhE,aAAa,mCAAyB6D,IAAI,CAACI,KAAL,CAAW,GAAX,CAAzB,EAAnB;AACD;AACF,KA5ID;AAAA;AAAA;;AA8IA,WAASC,OAAT,CAAiBvC,IAAjB,EAAuB;AACrB,WAAOwC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC/D,QAArC,EAA+CoB,IAA/C,CAAP;AACD;;AAED,WAAS4C,cAAT,GAA0B;AACxB,WAAOhE,QAAP;AACD;;AAED,WAASiE,aAAT,GAAyB;AACvB,WAAO3D,aAAP;AACD;;AAEDO,EAAAA,IAAI,CAACqD,MAAL,GAAc,yBAA0BrD,IAA1B,CAAd;AACAA,EAAAA,IAAI,CAACsC,cAAL,GAAsBA,cAAtB;AACAtC,EAAAA,IAAI,CAACwB,kBAAL,GAA0BA,kBAA1B;AACAxB,EAAAA,IAAI,CAACwC,QAAL,GAAgBA,QAAhB;AACAxC,EAAAA,IAAI,CAAC8C,OAAL,GAAeA,OAAf;AACA9C,EAAAA,IAAI,CAACmD,cAAL,GAAsBA,cAAtB;AACAnD,EAAAA,IAAI,CAACoD,aAAL,GAAqBA,aAArB;AAEA,SAAOpD,IAAP;AACD","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport {\r\n  NativeModules,\r\n  Platform,\r\n  PixelRatio,\r\n  processColor,\r\n  Text,\r\n} from 'react-native';\r\n\r\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\r\nimport createIconSourceCache from './create-icon-source-cache';\r\nimport createIconButtonComponent from './icon-button';\r\n\r\nexport const NativeIconAPI =\r\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\r\n\r\nexport const DEFAULT_ICON_SIZE = 12;\r\nexport const DEFAULT_ICON_COLOR = 'black';\r\n\r\nexport default function createIconSet(\r\n  glyphMap,\r\n  fontFamily,\r\n  fontFile,\r\n  fontStyle\r\n) {\r\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\r\n  const fontBasename = fontFile\r\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\r\n    : fontFamily;\r\n\r\n  const fontReference = Platform.select({\r\n    windows: `/Assets/${fontFile}#${fontFamily}`,\r\n    android: fontBasename,\r\n    web: fontBasename,\r\n    default: fontFamily,\r\n  });\r\n\r\n  class Icon extends PureComponent {\r\n    root = null;\r\n\r\n    static defaultProps = {\r\n      size: DEFAULT_ICON_SIZE,\r\n      allowFontScaling: false,\r\n    };\r\n\r\n    setNativeProps(nativeProps) {\r\n      if (this.root) {\r\n        this.root.setNativeProps(nativeProps);\r\n      }\r\n    }\r\n\r\n    handleRef = ref => {\r\n      this.root = ref;\r\n    };\r\n\r\n    render() {\r\n      const { name, size, color, style, children, ...props } = this.props;\r\n\r\n      let glyph = name ? glyphMap[name] || '?' : '';\r\n      if (typeof glyph === 'number') {\r\n        glyph = String.fromCodePoint(glyph);\r\n      }\r\n\r\n      const styleDefaults = {\r\n        fontSize: size,\r\n        color,\r\n      };\r\n\r\n      const styleOverrides = {\r\n        fontFamily: fontReference,\r\n        fontWeight: 'normal',\r\n        fontStyle: 'normal',\r\n      };\r\n\r\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\r\n      props.ref = this.handleRef;\r\n\r\n      return (\r\n        <Text selectable={false} {...props}>\r\n          {glyph}\r\n          {children}\r\n        </Text>\r\n      );\r\n    }\r\n  }\r\n\r\n  const imageSourceCache = createIconSourceCache();\r\n\r\n  function resolveGlyph(name) {\r\n    const glyph = glyphMap[name] || '?';\r\n    if (typeof glyph === 'number') {\r\n      return String.fromCodePoint(glyph);\r\n    }\r\n    return glyph;\r\n  }\r\n\r\n  function getImageSourceSync(\r\n    name,\r\n    size = DEFAULT_ICON_SIZE,\r\n    color = DEFAULT_ICON_COLOR\r\n  ) {\r\n    ensureNativeModuleAvailable();\r\n\r\n    const glyph = resolveGlyph(name);\r\n    const processedColor = processColor(color);\r\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\r\n\r\n    if (imageSourceCache.has(cacheKey)) {\r\n      return imageSourceCache.get(cacheKey);\r\n    }\r\n    try {\r\n      const imagePath = NativeIconAPI.getImageForFontSync(\r\n        fontReference,\r\n        glyph,\r\n        size,\r\n        processedColor\r\n      );\r\n      const value = { uri: imagePath, scale: PixelRatio.get() };\r\n      imageSourceCache.setValue(cacheKey, value);\r\n      return value;\r\n    } catch (error) {\r\n      imageSourceCache.setError(cacheKey, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async function getImageSource(\r\n    name,\r\n    size = DEFAULT_ICON_SIZE,\r\n    color = DEFAULT_ICON_COLOR\r\n  ) {\r\n    ensureNativeModuleAvailable();\r\n\r\n    const glyph = resolveGlyph(name);\r\n    const processedColor = processColor(color);\r\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\r\n\r\n    if (imageSourceCache.has(cacheKey)) {\r\n      return imageSourceCache.get(cacheKey);\r\n    }\r\n    try {\r\n      const imagePath = await NativeIconAPI.getImageForFont(\r\n        fontReference,\r\n        glyph,\r\n        size,\r\n        processedColor\r\n      );\r\n      const value = { uri: imagePath, scale: PixelRatio.get() };\r\n      imageSourceCache.setValue(cacheKey, value);\r\n      return value;\r\n    } catch (error) {\r\n      imageSourceCache.setError(cacheKey, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async function loadFont(file = fontFile) {\r\n    if (Platform.OS === 'ios') {\r\n      ensureNativeModuleAvailable();\r\n      if (!file) {\r\n        throw new Error('Unable to load font, because no file was specified. ');\r\n      }\r\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\r\n    }\r\n  }\r\n\r\n  function hasIcon(name) {\r\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\r\n  }\r\n\r\n  function getRawGlyphMap() {\r\n    return glyphMap;\r\n  }\r\n\r\n  function getFontFamily() {\r\n    return fontReference;\r\n  }\r\n\r\n  Icon.Button = createIconButtonComponent(Icon);\r\n  Icon.getImageSource = getImageSource;\r\n  Icon.getImageSourceSync = getImageSourceSync;\r\n  Icon.loadFont = loadFont;\r\n  Icon.hasIcon = hasIcon;\r\n  Icon.getRawGlyphMap = getRawGlyphMap;\r\n  Icon.getFontFamily = getFontFamily;\r\n\r\n  return Icon;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}