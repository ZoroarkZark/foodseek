{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.evaluateOnce = evaluateOnce;\n\nvar _InternalAnimatedValue = _interopRequireDefault(require(\"../core/InternalAnimatedValue\"));\n\nvar _AnimatedSet = require(\"../core/AnimatedSet\");\n\nvar _AnimatedCall = require(\"../core/AnimatedCall\");\n\nvar _AnimatedAlways = require(\"../core/AnimatedAlways\");\n\nvar _AnimatedCond = require(\"../core/AnimatedCond\");\n\nfunction evaluateOnce(node) {\n  var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var callback = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  var done = new _InternalAnimatedValue.default(0);\n  var evalNode = (0, _AnimatedCond.createAnimatedCond)(done, 0, (0, _AnimatedCall.createAnimatedCall)([node, (0, _AnimatedSet.createAnimatedSet)(done, 1)], function () {\n    callback && callback();\n\n    for (var i = 0; i < input.length; i++) {\n      input[i].__removeChild(alwaysNode);\n\n      alwaysNode.__detach();\n    }\n  }));\n  var alwaysNode = (0, _AnimatedAlways.createAnimatedAlways)(evalNode);\n\n  for (var i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n\n    alwaysNode.__attach();\n  }\n}","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js"],"names":["evaluateOnce","node","input","callback","Array","isArray","done","AnimatedValue","evalNode","i","length","__removeChild","alwaysNode","__detach","__addChild","__attach"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AASO,SAASA,YAAT,CAAsBC,IAAtB,EAAkD;AAAA,MAAtBC,KAAsB,uEAAd,EAAc;AAAA,MAAVC,QAAU;;AACvD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzBA,IAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACD;;AACD,MAAMI,IAAI,GAAG,IAAIC,8BAAJ,CAAkB,CAAlB,CAAb;AACA,MAAMC,QAAQ,GAAG,sCACfF,IADe,EAEf,CAFe,EAGf,sCAAK,CAACL,IAAD,EAAO,oCAAIK,IAAJ,EAAU,CAAV,CAAP,CAAL,EAA2B,YAAM;AAC/BH,IAAAA,QAAQ,IAAIA,QAAQ,EAApB;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCP,MAAAA,KAAK,CAACO,CAAD,CAAL,CAASE,aAAT,CAAuBC,UAAvB;;AACAA,MAAAA,UAAU,CAACC,QAAX;AACD;AACF,GAND,CAHe,CAAjB;AAWA,MAAMD,UAAU,GAAG,0CAAOJ,QAAP,CAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCP,IAAAA,KAAK,CAACO,CAAD,CAAL,CAASK,UAAT,CAAoBF,UAApB;;AACAA,IAAAA,UAAU,CAACG,QAAX;AACD;AACF","sourcesContent":["import AnimatedValue from '../core/InternalAnimatedValue';\r\nimport { createAnimatedSet as set } from '../core/AnimatedSet';\r\nimport { createAnimatedCall as call } from '../core/AnimatedCall';\r\nimport { createAnimatedAlways as always } from '../core/AnimatedAlways';\r\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\r\n\r\n/**\r\n * evaluate given node and notify children\r\n * @param node - node to be evaluated\r\n * @param input - nodes (or one node) representing values which states input for node.\r\n * @param callback - after callback\r\n */\r\n\r\nexport function evaluateOnce(node, input = [], callback) {\r\n  if (!Array.isArray(input)) {\r\n    input = [input];\r\n  }\r\n  const done = new AnimatedValue(0);\r\n  const evalNode = cond(\r\n    done,\r\n    0,\r\n    call([node, set(done, 1)], () => {\r\n      callback && callback();\r\n      for (let i = 0; i < input.length; i++) {\r\n        input[i].__removeChild(alwaysNode);\r\n        alwaysNode.__detach();\r\n      }\r\n    })\r\n  );\r\n  const alwaysNode = always(evalNode);\r\n  for (let i = 0; i < input.length; i++) {\r\n    input[i].__addChild(alwaysNode);\r\n    alwaysNode.__attach();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}