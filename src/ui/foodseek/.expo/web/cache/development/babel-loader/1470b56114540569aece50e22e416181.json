{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTag = getTag;\nexports.setGestureState = exports.scrollTo = exports.measure = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar _PlatformChecker = require(\"./PlatformChecker\");\n\nfunction getTag(view) {\n  return (0, _reactNative.findNodeHandle)(view);\n}\n\nvar isNativeIndefined = (0, _PlatformChecker.shouldBeUseWeb)();\n\nvar measure = function () {\n  var _f = function _f(animatedRef) {\n    if (!_WORKLET || isNativeIndefined) {\n      console.warn('[reanimated.measure] method cannot be used for web or Chrome Debugger');\n      return {\n        x: NaN,\n        y: NaN,\n        width: NaN,\n        height: NaN,\n        pageX: NaN,\n        pageY: NaN\n      };\n    }\n\n    var viewTag = animatedRef();\n\n    var result = _measure(viewTag);\n\n    if (result.x === -1234567) {\n      throw new Error(\"The view with tag \" + viewTag + \" could not be measured\");\n    }\n\n    return result;\n  };\n\n  _f._closure = {\n    isNativeIndefined: isNativeIndefined,\n    NaN: NaN\n  };\n  _f.asString = \"function measure(animatedRef){const{isNativeIndefined,NaN}=jsThis._closure;{if(!_WORKLET||isNativeIndefined){console.warn('[reanimated.measure] method cannot be used for web or Chrome Debugger');return{x:NaN,y:NaN,width:NaN,height:NaN,pageX:NaN,pageY:NaN};}const viewTag=animatedRef();const result=_measure(viewTag);if(result.x===-1234567){throw new Error(\\\"The view with tag \\\"+viewTag+\\\" could not be measured\\\");}return result;}}\";\n  _f.__workletHash = 16871416275568;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (7:7)\";\n  return _f;\n}();\n\nexports.measure = measure;\n\nvar scrollTo = function () {\n  var _f = function _f(animatedRef, x, y, animated) {\n    if (!_WORKLET || isNativeIndefined) {\n      return;\n    }\n\n    var viewTag = animatedRef();\n\n    _scrollTo(viewTag, x, y, animated);\n  };\n\n  _f._closure = {\n    isNativeIndefined: isNativeIndefined\n  };\n  _f.asString = \"function scrollTo(animatedRef,x,y,animated){const{isNativeIndefined}=jsThis._closure;{if(!_WORKLET||isNativeIndefined){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}}\";\n  _f.__workletHash = 15726952508258;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (27:7)\";\n  return _f;\n}();\n\nexports.scrollTo = scrollTo;\n\nvar setGestureState = function () {\n  var _f = function _f(handlerTag, newState) {\n    if (!_WORKLET || isNativeIndefined) {\n      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n      return;\n    }\n\n    _setGestureState(handlerTag, newState);\n  };\n\n  _f._closure = {\n    isNativeIndefined: isNativeIndefined\n  };\n  _f.asString = \"function setGestureState(handlerTag,newState){const{isNativeIndefined}=jsThis._closure;{if(!_WORKLET||isNativeIndefined){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');return;}_setGestureState(handlerTag,newState);}}\";\n  _f.__workletHash = 3665262151737;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (35:7)\";\n  return _f;\n}();\n\nexports.setGestureState = setGestureState;","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"names":["getTag","view","isNativeIndefined","measure","animatedRef","_WORKLET","console","warn","x","NaN","y","width","height","pageX","pageY","viewTag","result","_measure","Error","scrollTo","animated","_scrollTo","setGestureState","handlerTag","newState","_setGestureState"],"mappings":";;;;;;AAAA;;AACA;;AACO,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACzB,SAAO,iCAAeA,IAAf,CAAP;AACH;;AACD,IAAMC,iBAAiB,GAAG,sCAA1B;;IACgBC,O;uBAAQC,W,EAAa;AAEjC,QAAI,CAACC,QAAD,IAAaH,iBAAjB,EAAoC;AAChCI,MAAAA,OAAO,CAACC,IAAR,CAAa,uEAAb;AACA,aAAO;AACHC,QAAAA,CAAC,EAAEC,GADA;AAEHC,QAAAA,CAAC,EAAED,GAFA;AAGHE,QAAAA,KAAK,EAAEF,GAHJ;AAIHG,QAAAA,MAAM,EAAEH,GAJL;AAKHI,QAAAA,KAAK,EAAEJ,GALJ;AAMHK,QAAAA,KAAK,EAAEL;AANJ,OAAP;AAQH;;AACD,QAAMM,OAAO,GAAGX,WAAW,EAA3B;;AACA,QAAMY,MAAM,GAAGC,QAAQ,CAACF,OAAD,CAAvB;;AACA,QAAIC,MAAM,CAACR,CAAP,KAAa,CAAC,OAAlB,EAA2B;AACvB,YAAM,IAAIU,KAAJ,wBAA+BH,OAA/B,4BAAN;AACH;;AACD,WAAOC,MAAP;AACH,G;;;uBAvBkBd,iB;SAQNO;;;;;;;;;;IAgBGU,Q;uBAASf,W,EAAaI,C,EAAGE,C,EAAGU,Q,EAAU;AAElD,QAAI,CAACf,QAAD,IAAaH,iBAAjB,EAAoC;AAChC;AACH;;AACD,QAAMa,OAAO,GAAGX,WAAW,EAA3B;;AACAiB,IAAAA,SAAS,CAACN,OAAD,EAAUP,CAAV,EAAaE,CAAb,EAAgBU,QAAhB,CAAT;AACH,G;;;uBA/BkBlB;;;;;;;;;;IAgCHoB,e;uBAAgBC,U,EAAYC,Q,EAAU;AAElD,QAAI,CAACnB,QAAD,IAAaH,iBAAjB,EAAoC;AAChCI,MAAAA,OAAO,CAACC,IAAR,CAAa,uEAAb;AACA;AACH;;AACDkB,IAAAA,gBAAgB,CAACF,UAAD,EAAaC,QAAb,CAAhB;AACH,G;;;uBAvCkBtB","sourcesContent":["import { findNodeHandle } from 'react-native';\r\nimport { shouldBeUseWeb } from './PlatformChecker';\r\nexport function getTag(view) {\r\n    return findNodeHandle(view);\r\n}\r\nconst isNativeIndefined = shouldBeUseWeb();\r\nexport function measure(animatedRef) {\r\n    'worklet';\r\n    if (!_WORKLET || isNativeIndefined) {\r\n        console.warn('[reanimated.measure] method cannot be used for web or Chrome Debugger');\r\n        return {\r\n            x: NaN,\r\n            y: NaN,\r\n            width: NaN,\r\n            height: NaN,\r\n            pageX: NaN,\r\n            pageY: NaN,\r\n        };\r\n    }\r\n    const viewTag = animatedRef();\r\n    const result = _measure(viewTag);\r\n    if (result.x === -1234567) {\r\n        throw new Error(`The view with tag ${viewTag} could not be measured`);\r\n    }\r\n    return result;\r\n}\r\nexport function scrollTo(animatedRef, x, y, animated) {\r\n    'worklet';\r\n    if (!_WORKLET || isNativeIndefined) {\r\n        return;\r\n    }\r\n    const viewTag = animatedRef();\r\n    _scrollTo(viewTag, x, y, animated);\r\n}\r\nexport function setGestureState(handlerTag, newState) {\r\n    'worklet';\r\n    if (!_WORKLET || isNativeIndefined) {\r\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\r\n        return;\r\n    }\r\n    _setGestureState(handlerTag, newState);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}