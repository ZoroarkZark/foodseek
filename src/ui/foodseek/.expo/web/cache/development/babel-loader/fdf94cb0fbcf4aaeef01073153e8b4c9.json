{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _colors = require(\"../../constants/colors\");\n\nvar _typography = require(\"../../constants/typography\");\n\nvar _ThemeProvider = require(\"../../provider/ThemeProvider\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-rapi-ui\\\\components\\\\Text\\\\Text.tsx\";\n\nvar StyledText = function StyledText(props) {\n  var _props$style3, _props$style4;\n\n  var _useTheme = (0, _ThemeProvider.useTheme)(),\n      theme = _useTheme.theme;\n\n  var font = function font() {\n    if (props.italic) {\n      if (props.fontWeight) {\n        return _typography.italic[props.fontWeight];\n      }\n\n      return _typography.italic.regular;\n    } else {\n      if (props.fontWeight) {\n        return _typography.normal[props.fontWeight];\n      }\n\n      return _typography.normal.regular;\n    }\n  };\n\n  var size = function size() {\n    var _props$style;\n\n    if ((_props$style = props.style) != null && _props$style.fontSize) {\n      var _props$style2;\n\n      return (_props$style2 = props.style) == null ? void 0 : _props$style2.fontSize;\n    } else {\n      return props.size ? _typography.fontSize[props.size] : _typography.fontSize.lg;\n    }\n  };\n\n  return _react.default.createElement(_reactNative.Text, (0, _extends2.default)({}, props, {\n    style: Object.assign({}, props.style, {\n      fontFamily: font(),\n      fontSize: size(),\n      color: props.status ? _colors.themeColor[props.status] : (_props$style3 = props.style) != null && _props$style3.color ? (_props$style4 = props.style) == null ? void 0 : _props$style4.color : _colors.component[theme].text.color\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar _default = StyledText;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-rapi-ui/components/Text/Text.tsx"],"names":["StyledText","props","theme","font","italic","fontWeight","regular","normal","size","style","fontSize","lg","fontFamily","color","status","themeColor","component","text"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;AAUA,IAAMA,UAA2B,GAAG,SAA9BA,UAA8B,CAACC,KAAD,EAAkB;AAAA;;AACpD,kBAAkB,8BAAlB;AAAA,MAAQC,KAAR,aAAQA,KAAR;;AACA,MAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,QAAIF,KAAK,CAACG,MAAV,EAAkB;AAChB,UAAIH,KAAK,CAACI,UAAV,EAAsB;AACpB,eAAOD,mBAAOH,KAAK,CAACI,UAAb,CAAP;AACD;;AACD,aAAOD,mBAAOE,OAAd;AACD,KALD,MAKO;AACL,UAAIL,KAAK,CAACI,UAAV,EAAsB;AACpB,eAAOE,mBAAON,KAAK,CAACI,UAAb,CAAP;AACD;;AACD,aAAOE,mBAAOD,OAAd;AACD;AACF,GAZD;;AAcA,MAAME,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,wBAAIP,KAAK,CAACQ,KAAV,aAAI,aAAaC,QAAjB,EAA2B;AAAA;;AACzB,8BAAOT,KAAK,CAACQ,KAAb,qBAAO,cAAaC,QAApB;AACD,KAFD,MAEO;AACL,aAAOT,KAAK,CAACO,IAAN,GAAaE,qBAAST,KAAK,CAACO,IAAf,CAAb,GAAoCE,qBAASC,EAApD;AACD;AACF,GAND;;AAQA,SACE,6BAAC,iBAAD,6BACMV,KADN;AAEE,IAAA,KAAK,oBACAA,KAAK,CAACQ,KADN;AAEHG,MAAAA,UAAU,EAAET,IAAI,EAFb;AAGHO,MAAAA,QAAQ,EAAEF,IAAI,EAHX;AAIHK,MAAAA,KAAK,EAAEZ,KAAK,CAACa,MAAN,GACHC,mBAAWd,KAAK,CAACa,MAAjB,CADG,GAEH,iBAAAb,KAAK,CAACQ,KAAN,2BAAaI,KAAb,oBACAZ,KAAK,CAACQ,KADN,qBACA,cAAaI,KADb,GAEAG,kBAAUd,KAAV,EAAiBe,IAAjB,CAAsBJ;AARvB,MAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAeD,CAvCD;;eAyCeb,U","sourcesContent":["import React from \"react\";\r\nimport { Text, TextProps, TextStyle } from \"react-native\";\r\nimport { themeColor, component } from \"../../constants/colors\";\r\nimport { fontSize, normal, italic } from \"../../constants/typography\";\r\nimport { useTheme } from \"../../provider/ThemeProvider\";\r\n\r\ninterface Props extends TextProps {\r\n  fontWeight?: keyof typeof normal;\r\n  italic?: boolean;\r\n  size?: keyof typeof fontSize;\r\n  style?: TextStyle;\r\n  status?: \"primary\" | \"success\" | \"warning\" | \"info\" | \"danger\";\r\n}\r\n\r\nconst StyledText: React.FC<Props> = (props: Props) => {\r\n  const { theme } = useTheme();\r\n  const font = () => {\r\n    if (props.italic) {\r\n      if (props.fontWeight) {\r\n        return italic[props.fontWeight];\r\n      }\r\n      return italic.regular;\r\n    } else {\r\n      if (props.fontWeight) {\r\n        return normal[props.fontWeight];\r\n      }\r\n      return normal.regular;\r\n    }\r\n  };\r\n\r\n  const size = () => {\r\n    if (props.style?.fontSize) {\r\n      return props.style?.fontSize;\r\n    } else {\r\n      return props.size ? fontSize[props.size] : fontSize.lg;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Text\r\n      {...props}\r\n      style={{\r\n        ...props.style,\r\n        fontFamily: font(),\r\n        fontSize: size(),\r\n        color: props.status\r\n          ? themeColor[props.status]\r\n          : props.style?.color\r\n          ? props.style?.color\r\n          : component[theme].text.color,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StyledText;\r\n"]},"metadata":{},"sourceType":"script"}