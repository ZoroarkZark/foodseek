{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createAnimatedComponent;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ReanimatedEventEmitter = _interopRequireDefault(require(\"./ReanimatedEventEmitter\"));\n\nvar _AnimatedEvent = _interopRequireDefault(require(\"./reanimated1/core/AnimatedEvent\"));\n\nvar _AnimatedNode = _interopRequireDefault(require(\"./reanimated1/core/AnimatedNode\"));\n\nvar _AnimatedValue = _interopRequireDefault(require(\"./reanimated1/core/AnimatedValue\"));\n\nvar _AnimatedProps = require(\"./reanimated1/core/AnimatedProps\");\n\nvar _WorkletEventHandler = _interopRequireDefault(require(\"./reanimated2/WorkletEventHandler\"));\n\nvar _setAndForwardRef = _interopRequireDefault(require(\"./setAndForwardRef\"));\n\nrequire(\"./reanimated2/layoutReanimation/LayoutAnimationRepository\");\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _ConfigHelper = require(\"./ConfigHelper\");\n\nvar _RNRenderer = require(\"./reanimated2/platform-specific/RNRenderer\");\n\nvar _core = require(\"./reanimated2/core\");\n\nvar _Default = require(\"./reanimated2/layoutReanimation/defaultAnimations/Default\");\n\nvar _PlatformChecker = require(\"./reanimated2/PlatformChecker\");\n\nvar _animation = require(\"./reanimated2/animation\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\createAnimatedComponent.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {}\n\nfunction hasAnimatedNodes(value) {\n  if (value instanceof _AnimatedNode.default) {\n    return true;\n  }\n\n  if (Array.isArray(value)) {\n    return value.some(function (item) {\n      return hasAnimatedNodes(item);\n    });\n  }\n\n  if (value && typeof value === 'object') {\n    return Object.keys(value).some(function (key) {\n      return hasAnimatedNodes(value[key]);\n    });\n  }\n\n  return false;\n}\n\nfunction flattenArray(array) {\n  if (!Array.isArray(array)) {\n    return [array];\n  }\n\n  var resultArr = [];\n\n  var _flattenArray = function _flattenArray(arr) {\n    arr.forEach(function (item) {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n\n  _flattenArray(array);\n\n  return resultArr;\n}\n\nfunction onlyAnimatedStyles(styles) {\n  return styles.filter(function (style) {\n    return style === null || style === void 0 ? void 0 : style.viewDescriptors;\n  });\n}\n\nfunction isSameAnimatedStyle(style1, style2) {\n  return (style1 === null || style1 === void 0 ? void 0 : style1.viewsRef) === (style2 === null || style2 === void 0 ? void 0 : style2.viewsRef);\n}\n\nvar isSameAnimatedProps = isSameAnimatedStyle;\n\nvar has = function has(key, x) {\n  if (typeof x === 'function' || typeof x === 'object') {\n    if (x === null || x === undefined) {\n      return false;\n    } else {\n      return key in x;\n    }\n  }\n\n  return false;\n};\n\nfunction createAnimatedComponent(Component, options) {\n  var _this4 = this;\n\n  (0, _invariant.default)(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n\n  var AnimatedComponent = function (_React$Component) {\n    (0, _inherits2.default)(AnimatedComponent, _React$Component);\n\n    var _super = _createSuper(AnimatedComponent);\n\n    function AnimatedComponent(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedComponent);\n      _this = _super.call(this, props);\n      _this._invokeAnimatedPropsCallbackOnMount = false;\n      _this._styles = null;\n      _this._viewTag = -1;\n      _this._isFirstRender = true;\n      _this.animatedStyle = {\n        value: {}\n      };\n      _this.initialStyle = {};\n      _this._component = null;\n\n      _this._animatedPropsCallback = function () {\n        if (_this._component == null) {\n          _this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (typeof _this._component.setNativeProps !== 'function') {\n          _this.forceUpdate();\n        } else {\n          _this._component.setNativeProps(_this._propsAnimated.__getValue());\n        }\n      };\n\n      _this._setComponentRef = (0, _setAndForwardRef.default)({\n        getForwardedRef: function getForwardedRef() {\n          return _this.props.forwardedRef;\n        },\n        setLocalRef: function setLocalRef(ref) {\n          var tag = (0, _reactNative.findNodeHandle)(ref);\n\n          if ((_this.props.layout || _this.props.entering || _this.props.exiting) && tag != null) {\n            if (!(0, _PlatformChecker.shouldBeUseWeb)()) {\n              (0, _core.enableLayoutAnimations)(true, false);\n            }\n\n            var layout = _this.props.layout ? _this.props.layout : _Default.DefaultLayout;\n            var entering = _this.props.entering ? _this.props.entering : _Default.DefaultEntering;\n            var exiting = _this.props.exiting ? _this.props.exiting : _Default.DefaultExiting;\n\n            if (has('build', layout)) {\n              layout = layout.build();\n            }\n\n            if (has('build', entering)) {\n              entering = entering.build();\n            }\n\n            if (has('build', exiting)) {\n              exiting = exiting.build();\n            }\n\n            var config = {\n              layout: layout,\n              entering: entering,\n              exiting: exiting,\n              sv: _this.sv\n            };\n            (0, _core.runOnUI)(function () {\n              var _f = function _f() {\n                global.LayoutAnimationRepository.registerConfig(tag, config);\n              };\n\n              _f._closure = {\n                tag: tag,\n                config: config\n              };\n              _f.asString = \"function _f(){const{tag,config}=jsThis._closure;{global.LayoutAnimationRepository.registerConfig(tag,config);}}\";\n              _f.__workletHash = 5455589887771;\n              _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\createAnimatedComponent.js (149:32)\";\n              return _f;\n            }())();\n          }\n\n          if (ref !== _this._component) {\n            _this._component = ref;\n          }\n        }\n      });\n\n      _this._attachProps(_this.props);\n\n      if ((0, _PlatformChecker.isJest)()) {\n        _this.animatedStyle = {\n          value: {}\n        };\n      }\n\n      _this.sv = (0, _core.makeMutable)({});\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._detachPropUpdater();\n\n        this._propsAnimated && this._propsAnimated.__detach();\n\n        this._detachNativeEvents();\n\n        this._detachStyles();\n\n        this.sv = null;\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this._invokeAnimatedPropsCallbackOnMount) {\n          this._invokeAnimatedPropsCallbackOnMount = false;\n\n          this._animatedPropsCallback();\n        }\n\n        this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n\n        this._attachNativeEvents();\n\n        this._attachPropUpdater();\n\n        this._attachAnimatedStyles();\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        var _a;\n\n        return ((_a = this._component) === null || _a === void 0 ? void 0 : _a.getScrollableNode) ? this._component.getScrollableNode() : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        var viewTag = (0, _reactNative.findNodeHandle)((options === null || options === void 0 ? void 0 : options.setNativeProps) ? this : node);\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof _AnimatedEvent.default) {\n            prop.attachEvent(node, key);\n          } else if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default) {\n            prop.current.registerForEvents(viewTag, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof _AnimatedEvent.default) {\n            prop.detachEvent(node, key);\n          } else if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default) {\n            prop.current.unregisterFromEvents();\n          }\n        }\n      }\n    }, {\n      key: \"_detachStyles\",\n      value: function _detachStyles() {\n        var _a;\n\n        if (_reactNative.Platform.OS === 'web' && this._styles !== null) {\n          for (var style of this._styles) {\n            if (style === null || style === void 0 ? void 0 : style.viewsRef) {\n              style.viewsRef.remove(this);\n            }\n          }\n        } else if (this._viewTag !== -1 && this._styles !== null) {\n          for (var _style of this._styles) {\n            _style.viewDescriptors.remove(this._viewTag);\n          }\n\n          if ((_a = this.props.animatedProps) === null || _a === void 0 ? void 0 : _a.viewDescriptors) {\n            this.props.animatedProps.viewDescriptors.remove(this._viewTag);\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        var node = this._getEventViewRef();\n\n        var attached = new Set();\n        var nextEvts = new Set();\n        var viewTag;\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof _AnimatedEvent.default) {\n            nextEvts.add(prop.__nodeID);\n          } else if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default) {\n            if (viewTag === undefined) {\n              viewTag = prop.current.viewTag;\n            }\n          }\n        }\n\n        for (var _key in prevProps) {\n          var _prop = this.props[_key];\n\n          if (_prop instanceof _AnimatedEvent.default) {\n            if (!nextEvts.has(_prop.__nodeID)) {\n              _prop.detachEvent(node, _key);\n            } else {\n              attached.add(_prop.__nodeID);\n            }\n          } else if (has('current', _prop) && _prop.current instanceof _WorkletEventHandler.default && _prop.current.reattachNeeded) {\n            _prop.current.unregisterFromEvents();\n          }\n        }\n\n        for (var _key2 in this.props) {\n          var _prop2 = this.props[_key2];\n\n          if (_prop2 instanceof _AnimatedEvent.default && !attached.has(_prop2.__nodeID)) {\n            _prop2.attachEvent(node, _key2);\n          } else if (has('current', _prop2) && _prop2.current instanceof _WorkletEventHandler.default && _prop2.current.reattachNeeded) {\n            _prop2.current.registerForEvents(viewTag, _key2);\n\n            _prop2.current.reattachNeeded = false;\n          }\n        }\n      }\n    }, {\n      key: \"_attachProps\",\n      value: function _attachProps(nextProps) {\n        var oldPropsAnimated = this._propsAnimated;\n        this._propsAnimated = (0, _AnimatedProps.createOrReusePropsNode)(nextProps, this._animatedPropsCallback, oldPropsAnimated);\n\n        if (oldPropsAnimated !== this._propsAnimated) {\n          oldPropsAnimated && oldPropsAnimated.__detach();\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        var _a, _b;\n\n        if (options === null || options === void 0 ? void 0 : options.setNativeProps) {\n          options.setNativeProps(this._component, props);\n        } else {\n          (_b = (_a = this._component) === null || _a === void 0 ? void 0 : _a.setNativeProps) === null || _b === void 0 ? void 0 : _b.call(_a, props);\n        }\n      }\n    }, {\n      key: \"_attachPropUpdater\",\n      value: function _attachPropUpdater() {\n        var viewTag = (0, _reactNative.findNodeHandle)(this);\n        NODE_MAPPING.set(viewTag, this);\n\n        if (NODE_MAPPING.size === 1) {\n          _ReanimatedEventEmitter.default.addListener('onReanimatedPropsChange', listener);\n        }\n      }\n    }, {\n      key: \"_attachAnimatedStyles\",\n      value: function _attachAnimatedStyles() {\n        var _this2 = this;\n\n        var _a, _b, _c;\n\n        var styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];\n        var prevStyles = this._styles;\n        this._styles = styles;\n        var prevAnimatedProps = this._animatedProps;\n        this._animatedProps = this.props.animatedProps;\n        var viewTag;\n        var viewName;\n\n        if (_reactNative.Platform.OS === 'web') {\n          viewTag = (0, _reactNative.findNodeHandle)(this);\n          viewName = null;\n        } else {\n          var hostInstance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(this);\n\n          if (!hostInstance) {\n            throw new Error('Cannot find host instance for this component. Maybe it renders nothing?');\n          }\n\n          viewTag = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance._nativeTag;\n          viewName = (_a = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig) === null || _a === void 0 ? void 0 : _a.uiViewClassName;\n          var hasReanimated2Props = ((_b = this.props.animatedProps) === null || _b === void 0 ? void 0 : _b.viewDescriptors) || styles.length;\n\n          if (hasReanimated2Props && (hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig)) {\n            (0, _ConfigHelper.adaptViewConfig)(hostInstance.viewConfig);\n          }\n        }\n\n        this._viewTag = viewTag;\n\n        if (prevStyles) {\n          var hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && isSameAnimatedStyle(styles[0], prevStyles[0]);\n\n          if (!hasOneSameStyle) {\n            var _loop = function _loop(prevStyle) {\n              var isPresent = styles.some(function (style) {\n                return isSameAnimatedStyle(style, prevStyle);\n              });\n\n              if (!isPresent) {\n                prevStyle.viewDescriptors.remove(viewTag);\n              }\n            };\n\n            for (var prevStyle of prevStyles) {\n              _loop(prevStyle);\n            }\n          }\n        }\n\n        styles.forEach(function (style) {\n          style.viewDescriptors.add({\n            tag: viewTag,\n            name: viewName\n          });\n\n          if ((0, _PlatformChecker.isJest)()) {\n            _this2.animatedStyle.value = Object.assign(Object.assign({}, _this2.animatedStyle.value), style.initial.value);\n            style.animatedStyle.current = _this2.animatedStyle;\n          }\n        });\n\n        if (prevAnimatedProps && !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)) {\n          prevAnimatedProps.viewDescriptors.remove(viewTag);\n        }\n\n        if ((_c = this.props.animatedProps) === null || _c === void 0 ? void 0 : _c.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.add({\n            tag: viewTag,\n            name: viewName\n          });\n        }\n      }\n    }, {\n      key: \"_detachPropUpdater\",\n      value: function _detachPropUpdater() {\n        var viewTag = (0, _reactNative.findNodeHandle)(this);\n        NODE_MAPPING.delete(viewTag);\n\n        if (NODE_MAPPING.size === 0) {\n          _ReanimatedEventEmitter.default.removeAllListeners('onReanimatedPropsChange');\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this._attachProps(this.props);\n\n        this._reattachNativeEvents(prevProps);\n\n        this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n\n        this._attachAnimatedStyles();\n      }\n    }, {\n      key: \"_filterNonAnimatedStyle\",\n      value: function _filterNonAnimatedStyle(inputStyle) {\n        var style = {};\n\n        for (var key in inputStyle) {\n          var value = inputStyle[key];\n\n          if (!hasAnimatedNodes(value)) {\n            style[key] = value;\n          } else if (value instanceof _AnimatedValue.default) {\n            style[key] = value._startingValue;\n          }\n        }\n\n        return style;\n      }\n    }, {\n      key: \"_filterNonAnimatedProps\",\n      value: function _filterNonAnimatedProps(inputProps) {\n        var _this3 = this;\n\n        var props = {};\n\n        var _loop2 = function _loop2(key) {\n          var value = inputProps[key];\n\n          if (key === 'style') {\n            var styleProp = inputProps.style;\n            var styles = flattenArray(styleProp !== null && styleProp !== void 0 ? styleProp : []);\n            var processedStyle = styles.map(function (style) {\n              if (style && style.viewDescriptors) {\n                style.viewsRef.add(_this3);\n\n                if (_this3._isFirstRender) {\n                  _this3.initialStyle = Object.assign(Object.assign({}, style.initial.value), (0, _animation.initialUpdaterRun)(style.initial.updater));\n                }\n\n                return _this3.initialStyle;\n              } else {\n                return style;\n              }\n            });\n            props[key] = _this3._filterNonAnimatedStyle(_reactNative.StyleSheet.flatten(processedStyle));\n          } else if (key === 'animatedProps') {\n            var animatedProp = inputProps.animatedProps;\n\n            if (animatedProp.initial !== undefined) {\n              Object.keys(animatedProp.initial.value).forEach(function (key) {\n                var _a, _b;\n\n                props[key] = (_a = animatedProp.initial) === null || _a === void 0 ? void 0 : _a.value[key];\n                (_b = animatedProp.viewsRef) === null || _b === void 0 ? void 0 : _b.add(_this3);\n              });\n            }\n          } else if (value instanceof _AnimatedEvent.default) {\n            props[key] = dummyListener;\n          } else if (has('current', value) && value.current instanceof _WorkletEventHandler.default) {\n            if (value.current.eventNames.length > 0) {\n              value.current.eventNames.forEach(function (eventName) {\n                props[eventName] = has('listeners', value.current) ? value.current.listeners[eventName] : dummyListener;\n              });\n            } else {\n              props[key] = dummyListener;\n            }\n          } else if (!(value instanceof _AnimatedNode.default)) {\n            if (key !== 'onGestureHandlerStateChange' || !(0, _PlatformChecker.isChromeDebugger)()) {\n              props[key] = value;\n            }\n          } else if (value instanceof _AnimatedValue.default) {\n            props[key] = value._startingValue;\n          }\n        };\n\n        for (var key in inputProps) {\n          _loop2(key);\n        }\n\n        return props;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._filterNonAnimatedProps(this.props);\n\n        if ((0, _PlatformChecker.isJest)()) {\n          props.animatedStyle = this.animatedStyle;\n        }\n\n        if (this._isFirstRender) {\n          this._isFirstRender = false;\n        }\n\n        var platformProps = _reactNative.Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n\n        return _react.default.createElement(Component, (0, _extends2.default)({}, props, {\n          ref: this._setComponentRef\n        }, platformProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 21\n          }\n        }));\n      }\n    }]);\n    return AnimatedComponent;\n  }(_react.default.Component);\n\n  AnimatedComponent.displayName = \"AnimatedComponent(\" + (Component.displayName || Component.name || 'Component') + \")\";\n  return _react.default.forwardRef(function (props, ref) {\n    return _react.default.createElement(AnimatedComponent, (0, _extends2.default)({}, props, ref === null ? null : {\n      forwardedRef: ref\n    }, {\n      __self: _this4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }\n    }));\n  });\n}","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-reanimated/lib/createAnimatedComponent.js"],"names":["NODE_MAPPING","Map","listener","data","component","get","viewTag","_updateFromNative","props","dummyListener","hasAnimatedNodes","value","AnimatedNode","Array","isArray","some","item","Object","keys","key","flattenArray","array","resultArr","_flattenArray","arr","forEach","push","onlyAnimatedStyles","styles","filter","style","viewDescriptors","isSameAnimatedStyle","style1","style2","viewsRef","isSameAnimatedProps","has","x","undefined","createAnimatedComponent","Component","options","prototype","isReactComponent","AnimatedComponent","_invokeAnimatedPropsCallbackOnMount","_styles","_viewTag","_isFirstRender","animatedStyle","initialStyle","_component","_animatedPropsCallback","setNativeProps","forceUpdate","_propsAnimated","__getValue","_setComponentRef","getForwardedRef","forwardedRef","setLocalRef","ref","tag","layout","entering","exiting","DefaultLayout","DefaultEntering","DefaultExiting","build","config","sv","global","LayoutAnimationRepository","registerConfig","_attachProps","_detachPropUpdater","__detach","_detachNativeEvents","_detachStyles","setNativeView","_attachNativeEvents","_attachPropUpdater","_attachAnimatedStyles","_a","getScrollableNode","node","_getEventViewRef","prop","AnimatedEvent","attachEvent","current","WorkletEventHandler","registerForEvents","detachEvent","unregisterFromEvents","Platform","OS","remove","animatedProps","prevProps","attached","Set","nextEvts","add","__nodeID","reattachNeeded","nextProps","oldPropsAnimated","_b","call","set","size","ReanimatedEventEmitter","addListener","_c","prevStyles","prevAnimatedProps","_animatedProps","viewName","hostInstance","RNRenderer","findHostInstance_DEPRECATED","Error","_nativeTag","viewConfig","uiViewClassName","hasReanimated2Props","length","hasOneSameStyle","prevStyle","isPresent","name","assign","initial","delete","removeAllListeners","_reattachNativeEvents","inputStyle","AnimatedValue","_startingValue","inputProps","styleProp","processedStyle","map","updater","_filterNonAnimatedStyle","StyleSheet","flatten","animatedProp","eventNames","eventName","listeners","_filterNonAnimatedProps","platformProps","select","web","default","collapsable","React","displayName","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\r\nimport ReanimatedEventEmitter from './ReanimatedEventEmitter';\r\n// @ts-ignore JS file\r\nimport AnimatedEvent from './reanimated1/core/AnimatedEvent';\r\n// @ts-ignore JS file\r\nimport AnimatedNode from './reanimated1/core/AnimatedNode';\r\n// @ts-ignore JS file\r\nimport AnimatedValue from './reanimated1/core/AnimatedValue';\r\n// @ts-ignore JS file\r\nimport { createOrReusePropsNode } from './reanimated1/core/AnimatedProps';\r\nimport WorkletEventHandler from './reanimated2/WorkletEventHandler';\r\nimport setAndForwardRef from './setAndForwardRef';\r\nimport './reanimated2/layoutReanimation/LayoutAnimationRepository';\r\nimport invariant from 'invariant';\r\nimport { adaptViewConfig } from './ConfigHelper';\r\nimport { RNRenderer } from './reanimated2/platform-specific/RNRenderer';\r\nimport { makeMutable, runOnUI, enableLayoutAnimations, } from './reanimated2/core';\r\nimport { DefaultEntering, DefaultExiting, DefaultLayout, } from './reanimated2/layoutReanimation/defaultAnimations/Default';\r\nimport { isJest, isChromeDebugger, shouldBeUseWeb, } from './reanimated2/PlatformChecker';\r\nimport { initialUpdaterRun } from './reanimated2/animation';\r\nconst NODE_MAPPING = new Map();\r\nfunction listener(data) {\r\n    const component = NODE_MAPPING.get(data.viewTag);\r\n    component && component._updateFromNative(data.props);\r\n}\r\nfunction dummyListener() {\r\n    // empty listener we use to assign to listener properties for which animated\r\n    // event is used.\r\n}\r\nfunction hasAnimatedNodes(value) {\r\n    if (value instanceof AnimatedNode) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value.some((item) => hasAnimatedNodes(item));\r\n    }\r\n    if (value && typeof value === 'object') {\r\n        return Object.keys(value).some((key) => hasAnimatedNodes(value[key]));\r\n    }\r\n    return false;\r\n}\r\nfunction flattenArray(array) {\r\n    if (!Array.isArray(array)) {\r\n        return [array];\r\n    }\r\n    const resultArr = [];\r\n    const _flattenArray = (arr) => {\r\n        arr.forEach((item) => {\r\n            if (Array.isArray(item)) {\r\n                _flattenArray(item);\r\n            }\r\n            else {\r\n                resultArr.push(item);\r\n            }\r\n        });\r\n    };\r\n    _flattenArray(array);\r\n    return resultArr;\r\n}\r\nfunction onlyAnimatedStyles(styles) {\r\n    return styles.filter((style) => style === null || style === void 0 ? void 0 : style.viewDescriptors);\r\n}\r\nfunction isSameAnimatedStyle(style1, style2) {\r\n    // We cannot use equality check to compare useAnimatedStyle outputs directly.\r\n    // Instead, we can compare its viewsRefs.\r\n    return (style1 === null || style1 === void 0 ? void 0 : style1.viewsRef) === (style2 === null || style2 === void 0 ? void 0 : style2.viewsRef);\r\n}\r\nconst isSameAnimatedProps = isSameAnimatedStyle;\r\nconst has = (key, x) => {\r\n    if (typeof x === 'function' || typeof x === 'object') {\r\n        if (x === null || x === undefined) {\r\n            return false;\r\n        }\r\n        else {\r\n            return key in x;\r\n        }\r\n    }\r\n    return false;\r\n};\r\nexport default function createAnimatedComponent(Component, options) {\r\n    invariant(typeof Component !== 'function' ||\r\n        (Component.prototype && Component.prototype.isReactComponent), '`createAnimatedComponent` does not support stateless functional components; ' +\r\n        'use a class component instead.');\r\n    class AnimatedComponent extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this._invokeAnimatedPropsCallbackOnMount = false;\r\n            this._styles = null;\r\n            this._viewTag = -1;\r\n            this._isFirstRender = true;\r\n            this.animatedStyle = { value: {} };\r\n            this.initialStyle = {};\r\n            this._component = null;\r\n            // The system is best designed when setNativeProps is implemented. It is\r\n            // able to avoid re-rendering and directly set the attributes that changed.\r\n            // However, setNativeProps can only be implemented on native components\r\n            // If you want to animate a composite component, you need to re-render it.\r\n            // In this case, we have a fallback that uses forceUpdate.\r\n            this._animatedPropsCallback = () => {\r\n                if (this._component == null) {\r\n                    // AnimatedProps is created in will-mount because it's used in render.\r\n                    // But this callback may be invoked before mount in async mode,\r\n                    // In which case we should defer the setNativeProps() call.\r\n                    // React may throw away uncommitted work in async mode,\r\n                    // So a deferred call won't always be invoked.\r\n                    this._invokeAnimatedPropsCallbackOnMount = true;\r\n                }\r\n                else if (typeof this._component.setNativeProps !== 'function') {\r\n                    this.forceUpdate();\r\n                }\r\n                else {\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    this._component.setNativeProps(this._propsAnimated.__getValue());\r\n                }\r\n            };\r\n            this._setComponentRef = setAndForwardRef({\r\n                getForwardedRef: () => this.props.forwardedRef,\r\n                setLocalRef: (ref) => {\r\n                    // TODO update config\r\n                    const tag = findNodeHandle(ref);\r\n                    if ((this.props.layout || this.props.entering || this.props.exiting) &&\r\n                        tag != null) {\r\n                        if (!shouldBeUseWeb()) {\r\n                            enableLayoutAnimations(true, false);\r\n                        }\r\n                        let layout = this.props.layout ? this.props.layout : DefaultLayout;\r\n                        let entering = this.props.entering\r\n                            ? this.props.entering\r\n                            : DefaultEntering;\r\n                        let exiting = this.props.exiting\r\n                            ? this.props.exiting\r\n                            : DefaultExiting;\r\n                        if (has('build', layout)) {\r\n                            layout = layout.build();\r\n                        }\r\n                        if (has('build', entering)) {\r\n                            entering = entering.build();\r\n                        }\r\n                        if (has('build', exiting)) {\r\n                            exiting = exiting.build();\r\n                        }\r\n                        const config = {\r\n                            layout,\r\n                            entering,\r\n                            exiting,\r\n                            sv: this.sv,\r\n                        };\r\n                        runOnUI(() => {\r\n                            'worklet';\r\n                            global.LayoutAnimationRepository.registerConfig(tag, config);\r\n                        })();\r\n                    }\r\n                    if (ref !== this._component) {\r\n                        this._component = ref;\r\n                    }\r\n                },\r\n            });\r\n            this._attachProps(this.props);\r\n            if (isJest()) {\r\n                this.animatedStyle = { value: {} };\r\n            }\r\n            this.sv = makeMutable({});\r\n        }\r\n        componentWillUnmount() {\r\n            this._detachPropUpdater();\r\n            this._propsAnimated && this._propsAnimated.__detach();\r\n            this._detachNativeEvents();\r\n            this._detachStyles();\r\n            this.sv = null;\r\n        }\r\n        componentDidMount() {\r\n            if (this._invokeAnimatedPropsCallbackOnMount) {\r\n                this._invokeAnimatedPropsCallbackOnMount = false;\r\n                this._animatedPropsCallback();\r\n            }\r\n            this._propsAnimated &&\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                this._propsAnimated.setNativeView(this._component);\r\n            this._attachNativeEvents();\r\n            this._attachPropUpdater();\r\n            this._attachAnimatedStyles();\r\n        }\r\n        _getEventViewRef() {\r\n            var _a;\r\n            // Make sure to get the scrollable node for components that implement\r\n            // `ScrollResponder.Mixin`.\r\n            return ((_a = this._component) === null || _a === void 0 ? void 0 : _a.getScrollableNode) ? this._component.getScrollableNode()\r\n                : this._component;\r\n        }\r\n        _attachNativeEvents() {\r\n            const node = this._getEventViewRef();\r\n            const viewTag = findNodeHandle((options === null || options === void 0 ? void 0 : options.setNativeProps) ? this : node);\r\n            for (const key in this.props) {\r\n                const prop = this.props[key];\r\n                if (prop instanceof AnimatedEvent) {\r\n                    prop.attachEvent(node, key);\r\n                }\r\n                else if (has('current', prop) &&\r\n                    prop.current instanceof WorkletEventHandler) {\r\n                    prop.current.registerForEvents(viewTag, key);\r\n                }\r\n            }\r\n        }\r\n        _detachNativeEvents() {\r\n            const node = this._getEventViewRef();\r\n            for (const key in this.props) {\r\n                const prop = this.props[key];\r\n                if (prop instanceof AnimatedEvent) {\r\n                    prop.detachEvent(node, key);\r\n                }\r\n                else if (has('current', prop) &&\r\n                    prop.current instanceof WorkletEventHandler) {\r\n                    prop.current.unregisterFromEvents();\r\n                }\r\n            }\r\n        }\r\n        _detachStyles() {\r\n            var _a;\r\n            if (Platform.OS === 'web' && this._styles !== null) {\r\n                for (const style of this._styles) {\r\n                    if (style === null || style === void 0 ? void 0 : style.viewsRef) {\r\n                        style.viewsRef.remove(this);\r\n                    }\r\n                }\r\n            }\r\n            else if (this._viewTag !== -1 && this._styles !== null) {\r\n                for (const style of this._styles) {\r\n                    style.viewDescriptors.remove(this._viewTag);\r\n                }\r\n                if ((_a = this.props.animatedProps) === null || _a === void 0 ? void 0 : _a.viewDescriptors) {\r\n                    this.props.animatedProps.viewDescriptors.remove(this._viewTag);\r\n                }\r\n            }\r\n        }\r\n        _reattachNativeEvents(prevProps) {\r\n            const node = this._getEventViewRef();\r\n            const attached = new Set();\r\n            const nextEvts = new Set();\r\n            let viewTag;\r\n            for (const key in this.props) {\r\n                const prop = this.props[key];\r\n                if (prop instanceof AnimatedEvent) {\r\n                    nextEvts.add(prop.__nodeID);\r\n                }\r\n                else if (has('current', prop) &&\r\n                    prop.current instanceof WorkletEventHandler) {\r\n                    if (viewTag === undefined) {\r\n                        viewTag = prop.current.viewTag;\r\n                    }\r\n                }\r\n            }\r\n            for (const key in prevProps) {\r\n                const prop = this.props[key];\r\n                if (prop instanceof AnimatedEvent) {\r\n                    if (!nextEvts.has(prop.__nodeID)) {\r\n                        // event was in prev props but not in current props, we detach\r\n                        prop.detachEvent(node, key);\r\n                    }\r\n                    else {\r\n                        // event was in prev and is still in current props\r\n                        attached.add(prop.__nodeID);\r\n                    }\r\n                }\r\n                else if (has('current', prop) &&\r\n                    prop.current instanceof WorkletEventHandler &&\r\n                    prop.current.reattachNeeded) {\r\n                    prop.current.unregisterFromEvents();\r\n                }\r\n            }\r\n            for (const key in this.props) {\r\n                const prop = this.props[key];\r\n                if (prop instanceof AnimatedEvent &&\r\n                    !attached.has(prop.__nodeID)) {\r\n                    // not yet attached\r\n                    prop.attachEvent(node, key);\r\n                }\r\n                else if (has('current', prop) &&\r\n                    prop.current instanceof WorkletEventHandler &&\r\n                    prop.current.reattachNeeded) {\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    prop.current.registerForEvents(viewTag, key);\r\n                    prop.current.reattachNeeded = false;\r\n                }\r\n            }\r\n        }\r\n        _attachProps(nextProps) {\r\n            const oldPropsAnimated = this._propsAnimated;\r\n            this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated);\r\n            // If prop node has been reused we don't need to call into \"__detach\"\r\n            if (oldPropsAnimated !== this._propsAnimated) {\r\n                // When you call detach, it removes the element from the parent list\r\n                // of children. If it goes to 0, then the parent also detaches itself\r\n                // and so on.\r\n                // An optimization is to attach the new elements and THEN detach the old\r\n                // ones instead of detaching and THEN attaching.\r\n                // This way the intermediate state isn't to go to 0 and trigger\r\n                // this expensive recursive detaching to then re-attach everything on\r\n                // the very next operation.\r\n                oldPropsAnimated && oldPropsAnimated.__detach();\r\n            }\r\n        }\r\n        _updateFromNative(props) {\r\n            var _a, _b;\r\n            if (options === null || options === void 0 ? void 0 : options.setNativeProps) {\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                options.setNativeProps(this._component, props);\r\n            }\r\n            else {\r\n                // eslint-disable-next-line no-unused-expressions\r\n                (_b = (_a = this._component) === null || _a === void 0 ? void 0 : _a.setNativeProps) === null || _b === void 0 ? void 0 : _b.call(_a, props);\r\n            }\r\n        }\r\n        _attachPropUpdater() {\r\n            const viewTag = findNodeHandle(this);\r\n            NODE_MAPPING.set(viewTag, this);\r\n            if (NODE_MAPPING.size === 1) {\r\n                ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\r\n            }\r\n        }\r\n        _attachAnimatedStyles() {\r\n            var _a, _b, _c;\r\n            const styles = this.props.style\r\n                ? onlyAnimatedStyles(flattenArray(this.props.style))\r\n                : [];\r\n            const prevStyles = this._styles;\r\n            this._styles = styles;\r\n            const prevAnimatedProps = this._animatedProps;\r\n            this._animatedProps = this.props.animatedProps;\r\n            let viewTag;\r\n            let viewName;\r\n            if (Platform.OS === 'web') {\r\n                viewTag = findNodeHandle(this);\r\n                viewName = null;\r\n            }\r\n            else {\r\n                // hostInstance can be null for a component that doesn't render anything (render function returns null). Example: svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\r\n                const hostInstance = RNRenderer.findHostInstance_DEPRECATED(this);\r\n                if (!hostInstance) {\r\n                    throw new Error('Cannot find host instance for this component. Maybe it renders nothing?');\r\n                }\r\n                // we can access view tag in the same way it's accessed here https://github.com/facebook/react/blob/e3f4eb7272d4ca0ee49f27577156b57eeb07cf73/packages/react-native-renderer/src/ReactFabric.js#L146\r\n                viewTag = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance._nativeTag;\r\n                /**\r\n                 * RN uses viewConfig for components for storing different properties of the component(example: https://github.com/facebook/react-native/blob/master/Libraries/Components/ScrollView/ScrollViewViewConfig.js#L16).\r\n                 * The name we're looking for is in the field named uiViewClassName.\r\n                 */\r\n                viewName = (_a = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig) === null || _a === void 0 ? void 0 : _a.uiViewClassName;\r\n                // update UI props whitelist for this view\r\n                const hasReanimated2Props = ((_b = this.props.animatedProps) === null || _b === void 0 ? void 0 : _b.viewDescriptors) || styles.length;\r\n                if (hasReanimated2Props && (hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig)) {\r\n                    adaptViewConfig(hostInstance.viewConfig);\r\n                }\r\n            }\r\n            this._viewTag = viewTag;\r\n            // remove old styles\r\n            if (prevStyles) {\r\n                // in most of the cases, views have only a single animated style and it remains unchanged\r\n                const hasOneSameStyle = styles.length === 1 &&\r\n                    prevStyles.length === 1 &&\r\n                    isSameAnimatedStyle(styles[0], prevStyles[0]);\r\n                if (!hasOneSameStyle) {\r\n                    // otherwise, remove each style that is not present in new styles\r\n                    for (const prevStyle of prevStyles) {\r\n                        const isPresent = styles.some((style) => isSameAnimatedStyle(style, prevStyle));\r\n                        if (!isPresent) {\r\n                            prevStyle.viewDescriptors.remove(viewTag);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            styles.forEach((style) => {\r\n                style.viewDescriptors.add({ tag: viewTag, name: viewName });\r\n                if (isJest()) {\r\n                    /**\r\n                     * We need to connect Jest's TestObject instance whose contains just props object\r\n                     * with the updateProps() function where we update the properties of the component.\r\n                     * We can't update props object directly because TestObject contains a copy of props - look at render function:\r\n                     * const props = this._filterNonAnimatedProps(this.props);\r\n                     */\r\n                    this.animatedStyle.value = Object.assign(Object.assign({}, this.animatedStyle.value), style.initial.value);\r\n                    style.animatedStyle.current = this.animatedStyle;\r\n                }\r\n            });\r\n            // detach old animatedProps\r\n            if (prevAnimatedProps &&\r\n                !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)) {\r\n                prevAnimatedProps.viewDescriptors.remove(viewTag);\r\n            }\r\n            // attach animatedProps property\r\n            if ((_c = this.props.animatedProps) === null || _c === void 0 ? void 0 : _c.viewDescriptors) {\r\n                this.props.animatedProps.viewDescriptors.add({\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    tag: viewTag,\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    name: viewName,\r\n                });\r\n            }\r\n        }\r\n        _detachPropUpdater() {\r\n            const viewTag = findNodeHandle(this);\r\n            NODE_MAPPING.delete(viewTag);\r\n            if (NODE_MAPPING.size === 0) {\r\n                ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\r\n            }\r\n        }\r\n        componentDidUpdate(prevProps) {\r\n            this._attachProps(this.props);\r\n            this._reattachNativeEvents(prevProps);\r\n            this._propsAnimated &&\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                this._propsAnimated.setNativeView(this._component);\r\n            this._attachAnimatedStyles();\r\n        }\r\n        _filterNonAnimatedStyle(inputStyle) {\r\n            const style = {};\r\n            for (const key in inputStyle) {\r\n                const value = inputStyle[key];\r\n                if (!hasAnimatedNodes(value)) {\r\n                    style[key] = value;\r\n                }\r\n                else if (value instanceof AnimatedValue) {\r\n                    // if any style in animated component is set directly to the `Value` we set those styles to the first value of `Value` node in order\r\n                    // to avoid flash of default styles when `Value` is being asynchrounously sent via bridge and initialized in the native side.\r\n                    style[key] = value._startingValue;\r\n                }\r\n            }\r\n            return style;\r\n        }\r\n        _filterNonAnimatedProps(inputProps) {\r\n            const props = {};\r\n            for (const key in inputProps) {\r\n                const value = inputProps[key];\r\n                if (key === 'style') {\r\n                    const styleProp = inputProps.style;\r\n                    const styles = flattenArray(styleProp !== null && styleProp !== void 0 ? styleProp : []);\r\n                    const processedStyle = styles.map((style) => {\r\n                        if (style && style.viewDescriptors) {\r\n                            // this is how we recognize styles returned by useAnimatedStyle\r\n                            style.viewsRef.add(this);\r\n                            if (this._isFirstRender) {\r\n                                this.initialStyle = Object.assign(Object.assign({}, style.initial.value), initialUpdaterRun(style.initial.updater));\r\n                            }\r\n                            return this.initialStyle;\r\n                        }\r\n                        else {\r\n                            return style;\r\n                        }\r\n                    });\r\n                    props[key] = this._filterNonAnimatedStyle(StyleSheet.flatten(processedStyle));\r\n                }\r\n                else if (key === 'animatedProps') {\r\n                    const animatedProp = inputProps.animatedProps;\r\n                    if (animatedProp.initial !== undefined) {\r\n                        Object.keys(animatedProp.initial.value).forEach((key) => {\r\n                            var _a, _b;\r\n                            props[key] = (_a = animatedProp.initial) === null || _a === void 0 ? void 0 : _a.value[key];\r\n                            (_b = animatedProp.viewsRef) === null || _b === void 0 ? void 0 : _b.add(this);\r\n                        });\r\n                    }\r\n                }\r\n                else if (value instanceof AnimatedEvent) {\r\n                    // we cannot filter out event listeners completely as some components\r\n                    // rely on having a callback registered in order to generate events\r\n                    // alltogether. Therefore we provide a dummy callback here to allow\r\n                    // native event dispatcher to hijack events.\r\n                    props[key] = dummyListener;\r\n                }\r\n                else if (has('current', value) &&\r\n                    value.current instanceof WorkletEventHandler) {\r\n                    if (value.current.eventNames.length > 0) {\r\n                        value.current.eventNames.forEach((eventName) => {\r\n                            props[eventName] = has('listeners', value.current)\r\n                                ? value.current.listeners[eventName]\r\n                                : dummyListener;\r\n                        });\r\n                    }\r\n                    else {\r\n                        props[key] = dummyListener;\r\n                    }\r\n                }\r\n                else if (!(value instanceof AnimatedNode)) {\r\n                    if (key !== 'onGestureHandlerStateChange' || !isChromeDebugger()) {\r\n                        props[key] = value;\r\n                    }\r\n                }\r\n                else if (value instanceof AnimatedValue) {\r\n                    // if any prop in animated component is set directly to the `Value` we set those props to the first value of `Value` node in order\r\n                    // to avoid default values for a short moment when `Value` is being asynchrounously sent via bridge and initialized in the native side.\r\n                    props[key] = value._startingValue;\r\n                }\r\n            }\r\n            return props;\r\n        }\r\n        render() {\r\n            const props = this._filterNonAnimatedProps(this.props);\r\n            if (isJest()) {\r\n                props.animatedStyle = this.animatedStyle;\r\n            }\r\n            if (this._isFirstRender) {\r\n                this._isFirstRender = false;\r\n            }\r\n            const platformProps = Platform.select({\r\n                web: {},\r\n                default: { collapsable: false },\r\n            });\r\n            return (<Component {...props} ref={this._setComponentRef} {...platformProps}/>);\r\n        }\r\n    }\r\n    AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || 'Component'})`;\r\n    return React.forwardRef((props, ref) => {\r\n        return (<AnimatedComponent {...props} {...(ref === null ? null : { forwardedRef: ref })}/>);\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}