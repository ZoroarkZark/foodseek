{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _base = require(\"./base\");\n\nvar _AnimatedBezier = _interopRequireDefault(require(\"./core/AnimatedBezier\"));\n\nvar Easing = function () {\n  function Easing() {\n    (0, _classCallCheck2.default)(this, Easing);\n  }\n\n  (0, _createClass2.default)(Easing, null, [{\n    key: \"linear\",\n    value: function linear(t) {\n      return t;\n    }\n  }, {\n    key: \"ease\",\n    value: function ease(t) {\n      return new _AnimatedBezier.default(t, 0.42, 0, 1, 1);\n    }\n  }, {\n    key: \"quad\",\n    value: function quad(t) {\n      return (0, _base.multiply)(t, t);\n    }\n  }, {\n    key: \"cubic\",\n    value: function cubic(t) {\n      return (0, _base.multiply)(t, t, t);\n    }\n  }, {\n    key: \"poly\",\n    value: function poly(n) {\n      return function (t) {\n        return (0, _base.pow)(t, n);\n      };\n    }\n  }, {\n    key: \"sin\",\n    value: function sin(t) {\n      return (0, _base.sub)(1, (0, _base.cos)((0, _base.multiply)(t, Math.PI, 0.5)));\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(t) {\n      return (0, _base.sub)(1, (0, _base.sqrt)((0, _base.sub)(1, (0, _base.multiply)(t, t))));\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(t) {\n      return (0, _base.pow)(2, (0, _base.multiply)(10, (0, _base.sub)(t, 1)));\n    }\n  }, {\n    key: \"elastic\",\n    value: function elastic() {\n      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var p = bounciness * Math.PI;\n      return function (t) {\n        return (0, _base.sub)(1, (0, _base.multiply)((0, _base.pow)((0, _base.cos)((0, _base.multiply)(t, Math.PI, 0.5)), 3), (0, _base.cos)((0, _base.multiply)(t, p))));\n      };\n    }\n  }, {\n    key: \"back\",\n    value: function back(s) {\n      if (s === undefined) {\n        s = 1.70158;\n      }\n\n      return function (t) {\n        return (0, _base.multiply)(t, t, (0, _base.sub)((0, _base.multiply)((0, _base.add)(s, 1), t), s));\n      };\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce(t) {\n      var sq = function sq(v) {\n        return (0, _base.multiply)(7.5625, v, v);\n      };\n\n      return (0, _base.cond)((0, _base.lessThan)(t, 1 / 2.75), sq(t), (0, _base.cond)((0, _base.lessThan)(t, 2 / 2.75), (0, _base.add)(0.75, sq((0, _base.sub)(t, 1.5 / 2.75))), (0, _base.cond)((0, _base.lessThan)(t, 2.5 / 2.76), (0, _base.add)(0.9375, sq((0, _base.sub)(t, 2.25 / 2.75))), (0, _base.add)(0.984375, sq((0, _base.sub)(t, 2.625 / 2.75))))));\n    }\n  }, {\n    key: \"bezier\",\n    value: function bezier(x1, y1, x2, y2) {\n      return function (t) {\n        return new _AnimatedBezier.default(t, x1, y1, x2, y2);\n      };\n    }\n  }, {\n    key: \"in\",\n    value: function _in(easing) {\n      return easing;\n    }\n  }, {\n    key: \"out\",\n    value: function out(easing) {\n      return function (t) {\n        return (0, _base.sub)(1, easing((0, _base.sub)(1, t)));\n      };\n    }\n  }, {\n    key: \"inOut\",\n    value: function inOut(easing) {\n      return function (t) {\n        return (0, _base.cond)((0, _base.lessThan)(t, 0.5), (0, _base.divide)(easing((0, _base.multiply)(t, 2)), 2), (0, _base.sub)(1, (0, _base.divide)(easing((0, _base.multiply)((0, _base.sub)(1, t), 2)), 2)));\n      };\n    }\n  }]);\n  return Easing;\n}();\n\nexports.default = Easing;","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-reanimated/lib/reanimated1/Easing.js"],"names":["Easing","t","AnimatedBezier","n","Math","PI","bounciness","p","s","undefined","sq","v","x1","y1","x2","y2","easing"],"mappings":"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","sourcesContent":["import {\r\n  cond,\r\n  lessThan,\r\n  multiply,\r\n  pow,\r\n  cos,\r\n  sqrt,\r\n  sub,\r\n  add,\r\n  divide,\r\n} from './base';\r\nimport AnimatedBezier from './core/AnimatedBezier';\r\n\r\n/**\r\n * The `Easing` module implements common easing functions. This module is used\r\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\r\n * believable motion in animations.\r\n *\r\n * You can find a visualization of some common easing functions at\r\n * http://easings.net/\r\n *\r\n * ### Predefined animations\r\n *\r\n * The `Easing` module provides several predefined animations through the\r\n * following methods:\r\n *\r\n * - [`back`](docs/easing.html#back) provides a simple animation where the\r\n *   object goes slightly back before moving forward\r\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\r\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\r\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\r\n *\r\n * ### Standard functions\r\n *\r\n * Three standard easing functions are provided:\r\n *\r\n * - [`linear`](docs/easing.html#linear)\r\n * - [`quad`](docs/easing.html#quad)\r\n * - [`cubic`](docs/easing.html#cubic)\r\n *\r\n * The [`poly`](docs/easing.html#poly) function can be used to implement\r\n * quartic, quintic, and other higher power functions.\r\n *\r\n * ### Additional functions\r\n *\r\n * Additional mathematical functions are provided by the following methods:\r\n *\r\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\r\n * - [`circle`](docs/easing.html#circle) provides a circular function\r\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\r\n * - [`exp`](docs/easing.html#exp) provides an exponential function\r\n *\r\n * The following helpers are used to modify other easing functions.\r\n *\r\n * - [`in`](docs/easing.html#in) runs an easing function forwards\r\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\r\n * - [`out`](docs/easing.html#out) runs an easing function backwards\r\n */\r\nexport default class Easing {\r\n  /**\r\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\r\n   * one.\r\n   *\r\n   * http://cubic-bezier.com/#0,0,1,1\r\n   */\r\n  static linear(t) {\r\n    return t;\r\n  }\r\n\r\n  /**\r\n   * A simple inertial interaction, similar to an object slowly accelerating to\r\n   * speed.\r\n   *\r\n   * http://cubic-bezier.com/#.42,0,1,1\r\n   */\r\n  static ease(t) {\r\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\r\n  }\r\n\r\n  /**\r\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\r\n   * time.\r\n   *\r\n   * http://easings.net/#easeInQuad\r\n   */\r\n  static quad(t) {\r\n    return multiply(t, t);\r\n  }\r\n\r\n  /**\r\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\r\n   * time.\r\n   *\r\n   * http://easings.net/#easeInCubic\r\n   */\r\n  static cubic(t) {\r\n    return multiply(t, t, t);\r\n  }\r\n\r\n  /**\r\n   * A power function. Position is equal to the Nth power of elapsed time.\r\n   *\r\n   * n = 4: http://easings.net/#easeInQuart\r\n   * n = 5: http://easings.net/#easeInQuint\r\n   */\r\n  static poly(n) {\r\n    return (t) => pow(t, n);\r\n  }\r\n\r\n  /**\r\n   * A sinusoidal function.\r\n   *\r\n   * http://easings.net/#easeInSine\r\n   */\r\n  static sin(t) {\r\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\r\n  }\r\n\r\n  /**\r\n   * A circular function.\r\n   *\r\n   * http://easings.net/#easeInCirc\r\n   */\r\n  static circle(t) {\r\n    return sub(1, sqrt(sub(1, multiply(t, t))));\r\n  }\r\n\r\n  /**\r\n   * An exponential function.\r\n   *\r\n   * http://easings.net/#easeInExpo\r\n   */\r\n  static exp(t) {\r\n    return pow(2, multiply(10, sub(t, 1)));\r\n  }\r\n\r\n  /**\r\n   * A simple elastic interaction, similar to a spring oscillating back and\r\n   * forth.\r\n   *\r\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\r\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\r\n   * times.\r\n   *\r\n   * http://easings.net/#easeInElastic\r\n   */\r\n  static elastic(bounciness = 1) {\r\n    const p = bounciness * Math.PI;\r\n    return (t) =>\r\n      sub(\r\n        1,\r\n        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Use with `Animated.parallel()` to create a simple effect where the object\r\n   * animates back slightly as the animation starts.\r\n   *\r\n   * Wolfram Plot:\r\n   *\r\n   * - http://tiny.cc/back_default (s = 1.70158, default)\r\n   */\r\n  static back(s) {\r\n    if (s === undefined) {\r\n      s = 1.70158;\r\n    }\r\n    return (t) => multiply(t, t, sub(multiply(add(s, 1), t), s));\r\n  }\r\n\r\n  /**\r\n   * Provides a simple bouncing effect.\r\n   *\r\n   * http://easings.net/#easeInBounce\r\n   */\r\n  static bounce(t) {\r\n    const sq = (v) => multiply(7.5625, v, v);\r\n    return cond(\r\n      lessThan(t, 1 / 2.75),\r\n      sq(t),\r\n      cond(\r\n        lessThan(t, 2 / 2.75),\r\n        add(0.75, sq(sub(t, 1.5 / 2.75))),\r\n        cond(\r\n          lessThan(t, 2.5 / 2.76),\r\n          add(0.9375, sq(sub(t, 2.25 / 2.75))),\r\n          add(0.984375, sq(sub(t, 2.625 / 2.75)))\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\r\n   * `transition-timing-function`.\r\n   *\r\n   * A useful tool to visualize cubic bezier curves can be found at\r\n   * http://cubic-bezier.com/\r\n   */\r\n  static bezier(x1, y1, x2, y2) {\r\n    return (t) => new AnimatedBezier(t, x1, y1, x2, y2);\r\n  }\r\n\r\n  /**\r\n   * Runs an easing function forwards.\r\n   */\r\n  static in(easing) {\r\n    return easing;\r\n  }\r\n\r\n  /**\r\n   * Runs an easing function backwards.\r\n   */\r\n  static out(easing) {\r\n    return (t) => sub(1, easing(sub(1, t)));\r\n  }\r\n\r\n  /**\r\n   * Makes any easing function symmetrical. The easing function will run\r\n   * forwards for half of the duration, then backwards for the rest of the\r\n   * duration.\r\n   */\r\n  static inOut(easing) {\r\n    return (t) =>\r\n      cond(\r\n        lessThan(t, 0.5),\r\n        divide(easing(multiply(t, 2)), 2),\r\n        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))\r\n      );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}