{"ast":null,"code":"var _core = require(\"../core\");\n\nvar _styleAnimation = require(\"../animation/styleAnimation\");\n\nvar _UpdateProps = require(\"../UpdateProps\");\n\nvar _Colors = require(\"../Colors\");\n\n(0, _core.runOnUI)(function () {\n  var _f = function _f() {\n    var configs = {};\n    var enteringAnimationForTag = {};\n    global.LayoutAnimationRepository = {\n      configs: configs,\n      registerConfig: function registerConfig(tag, config) {\n        configs[tag] = config;\n        enteringAnimationForTag[tag] = null;\n      },\n      removeConfig: function removeConfig(tag) {\n        delete configs[tag];\n        delete enteringAnimationForTag[tag];\n      },\n      startAnimationForTag: function startAnimationForTag(tag, type, yogaValues) {\n        if (configs[tag] == null) {\n          return;\n        }\n\n        var style = configs[tag][type](yogaValues);\n        var currentAnimation = style.animations;\n\n        if (type === 'entering') {\n          enteringAnimationForTag[tag] = style;\n        } else if (type === 'layout' && enteringAnimationForTag[tag] !== null) {\n          var entryAniamtion = enteringAnimationForTag[tag].animations;\n          var layoutAnimation = style.animations;\n          currentAnimation = {};\n\n          for (var key in entryAniamtion) {\n            currentAnimation[key] = entryAniamtion[key];\n          }\n\n          for (var _key in layoutAnimation) {\n            currentAnimation[_key] = layoutAnimation[_key];\n          }\n        }\n\n        var sv = configs[tag].sv;\n\n        _stopObservingProgress(tag, false);\n\n        _startObservingProgress(tag, sv);\n\n        var backupColor = {};\n\n        for (var _key2 in style.initialValues) {\n          if (_UpdateProps.ColorProperties.includes(_key2)) {\n            var value = style.initialValues[_key2];\n            backupColor[_key2] = value;\n            style.initialValues[_key2] = (0, _Colors.processColor)(value);\n          }\n        }\n\n        sv.value = Object.assign({}, sv._value, style.initialValues);\n\n        _stopObservingProgress(tag, false);\n\n        var animation = (0, _styleAnimation.withStyleAnimation)(currentAnimation);\n\n        animation.callback = function (finished) {\n          if (finished) {\n            _stopObservingProgress(tag, finished);\n          }\n\n          style.callback && style.callback(finished);\n        };\n\n        if (backupColor) {\n          configs[tag].sv._value = Object.assign(Object.assign({}, configs[tag].sv.value), backupColor);\n        }\n\n        configs[tag].sv.value = animation;\n\n        _startObservingProgress(tag, sv);\n      }\n    };\n  };\n\n  _f._closure = {\n    ColorProperties: _UpdateProps.ColorProperties,\n    processColor: _Colors.processColor,\n    withStyleAnimation: _styleAnimation.withStyleAnimation\n  };\n  _f.asString = \"function _f(){const{ColorProperties,processColor,withStyleAnimation}=jsThis._closure;{const configs={};const enteringAnimationForTag={};global.LayoutAnimationRepository={configs:configs,registerConfig:function(tag,config){configs[tag]=config;enteringAnimationForTag[tag]=null;},removeConfig:function(tag){delete configs[tag];delete enteringAnimationForTag[tag];},startAnimationForTag:function(tag,type,yogaValues){if(configs[tag]==null){return;}const style=configs[tag][type](yogaValues);let currentAnimation=style.animations;if(type==='entering'){enteringAnimationForTag[tag]=style;}else if(type==='layout'&&enteringAnimationForTag[tag]!==null){const entryAniamtion=enteringAnimationForTag[tag].animations;const layoutAnimation=style.animations;currentAnimation={};for(const key in entryAniamtion){currentAnimation[key]=entryAniamtion[key];}for(const key in layoutAnimation){currentAnimation[key]=layoutAnimation[key];}}const sv=configs[tag].sv;_stopObservingProgress(tag,false);_startObservingProgress(tag,sv);const backupColor={};for(const key in style.initialValues){if(ColorProperties.includes(key)){const value=style.initialValues[key];backupColor[key]=value;style.initialValues[key]=processColor(value);}}sv.value=Object.assign({},sv._value,style.initialValues);_stopObservingProgress(tag,false);const animation=withStyleAnimation(currentAnimation);animation.callback=function(finished){if(finished){_stopObservingProgress(tag,finished);}style.callback&&style.callback(finished);};if(backupColor){configs[tag].sv._value=Object.assign(Object.assign({},configs[tag].sv.value),backupColor);}configs[tag].sv.value=animation;_startObservingProgress(tag,sv);}};}}\";\n  _f.__workletHash = 15633326713685;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\layoutReanimation\\\\LayoutAnimationRepository.js (6:8)\";\n  return _f;\n}())();","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/LayoutAnimationRepository.js"],"names":["configs","enteringAnimationForTag","global","LayoutAnimationRepository","registerConfig","tag","config","removeConfig","startAnimationForTag","type","yogaValues","style","currentAnimation","animations","entryAniamtion","layoutAnimation","key","sv","_stopObservingProgress","_startObservingProgress","backupColor","initialValues","ColorProperties","includes","value","Object","assign","_value","animation","callback","finished","processColor","withStyleAnimation"],"mappings":"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","sourcesContent":["/* global _stopObservingProgress, _startObservingProgress */\r\nimport { runOnUI } from '../core';\r\nimport { withStyleAnimation } from '../animation/styleAnimation';\r\nimport { ColorProperties } from '../UpdateProps';\r\nimport { processColor } from '../Colors';\r\nrunOnUI(() => {\r\n    'worklet';\r\n    const configs = {};\r\n    const enteringAnimationForTag = {};\r\n    global.LayoutAnimationRepository = {\r\n        configs,\r\n        registerConfig(tag, config) {\r\n            configs[tag] = config;\r\n            enteringAnimationForTag[tag] = null;\r\n        },\r\n        removeConfig(tag) {\r\n            delete configs[tag];\r\n            delete enteringAnimationForTag[tag];\r\n        },\r\n        startAnimationForTag(tag, type, yogaValues) {\r\n            if (configs[tag] == null) {\r\n                return; // :(\r\n            }\r\n            const style = configs[tag][type](yogaValues);\r\n            let currentAnimation = style.animations;\r\n            if (type === 'entering') {\r\n                enteringAnimationForTag[tag] = style;\r\n            }\r\n            else if (type === 'layout' && enteringAnimationForTag[tag] !== null) {\r\n                const entryAniamtion = enteringAnimationForTag[tag].animations;\r\n                const layoutAnimation = style.animations;\r\n                currentAnimation = {};\r\n                for (const key in entryAniamtion) {\r\n                    currentAnimation[key] = entryAniamtion[key];\r\n                }\r\n                for (const key in layoutAnimation) {\r\n                    currentAnimation[key] = layoutAnimation[key];\r\n                }\r\n            }\r\n            const sv = configs[tag].sv;\r\n            _stopObservingProgress(tag, false);\r\n            _startObservingProgress(tag, sv);\r\n            const backupColor = {};\r\n            for (const key in style.initialValues) {\r\n                if (ColorProperties.includes(key)) {\r\n                    const value = style.initialValues[key];\r\n                    backupColor[key] = value;\r\n                    style.initialValues[key] = processColor(value);\r\n                }\r\n            }\r\n            sv.value = Object.assign({}, sv._value, style.initialValues);\r\n            _stopObservingProgress(tag, false);\r\n            const animation = withStyleAnimation(currentAnimation);\r\n            animation.callback = (finished) => {\r\n                if (finished) {\r\n                    _stopObservingProgress(tag, finished);\r\n                }\r\n                style.callback && style.callback(finished);\r\n            };\r\n            if (backupColor) {\r\n                configs[tag].sv._value = Object.assign(Object.assign({}, configs[tag].sv.value), backupColor);\r\n            }\r\n            configs[tag].sv.value = animation;\r\n            _startObservingProgress(tag, sv);\r\n        },\r\n    };\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}