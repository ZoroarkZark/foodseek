{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasProperty = hasProperty;\nexports.isFabric = isFabric;\nexports.isJestEnv = isJestEnv;\nexports.isRemoteDebuggingEnabled = isRemoteDebuggingEnabled;\nexports.shouldUseCodegenNativeComponent = shouldUseCodegenNativeComponent;\nexports.tagMessage = tagMessage;\nexports.toArray = toArray;\nexports.withPrevAndCurrent = withPrevAndCurrent;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _package = _interopRequireDefault(require(\"react-native/package.json\"));\n\nvar rnVersion = _package.default.version;\n\nfunction toArray(object) {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n\n  return object;\n}\n\nfunction withPrevAndCurrent(array, mapFn) {\n  var previousArr = [null];\n  var currentArr = (0, _toConsumableArray2.default)(array);\n  var transformedArr = [];\n  currentArr.forEach(function (current, i) {\n    var previous = previousArr[i];\n    var transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\nfunction hasProperty(object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction isJestEnv() {\n  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;\n}\n\nfunction tagMessage(msg) {\n  return \"[react-native-gesture-handler] \" + msg;\n}\n\nfunction isFabric() {\n  var _global;\n\n  return !!((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager);\n}\n\nfunction shouldUseCodegenNativeComponent() {\n  var _rnVersion$split = rnVersion.split('.'),\n      _rnVersion$split2 = (0, _slicedToArray2.default)(_rnVersion$split, 2),\n      majorStr = _rnVersion$split2[0],\n      minorStr = _rnVersion$split2[1];\n\n  var major = Number.parseInt(majorStr);\n  var minor = Number.parseInt(minorStr);\n  return minor >= 68 || major > 0;\n}\n\nfunction isRemoteDebuggingEnabled() {\n  return !global.nativeCallSyncHook || global.__REMOTEDEV__;\n}","map":{"version":3,"sources":["utils.ts"],"names":["rnVersion","pack","Array","previousArr","currentArr","transformedArr","previous","transformed","mapFn","Object","hasProperty","process","global","major","Number","minor"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAEA,IAAMA,SAAS,GAAGC,iBAAlB,OAAA;;AAEO,SAAA,OAAA,CAAA,MAAA,EAA0C;AAC/C,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,MAAKA,CAAL,EAA4B;AAC1B,WAAO,CAAP,MAAO,CAAP;AACD;;AAED,SAAA,MAAA;AACD;;AAMM,SAAA,kBAAA,CAAA,KAAA,EAAA,KAAA,EAGU;AACf,MAAMC,WAAmC,GAAG,CAA5C,IAA4C,CAA5C;AACA,MAAMC,UAAU,oCAAhB,KAAgB,CAAhB;AACA,MAAMC,cAA6B,GAAnC,EAAA;AACAD,EAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,OAAA,EAAA,CAAA,EAAgB;AACjC,QAAME,QAAQ,GAAGH,WAAW,CAA5B,CAA4B,CAA5B;AACA,QAAMI,WAAW,GAAGC,KAAK,CAAA,QAAA,EAAzB,OAAyB,CAAzB;AACAL,IAAAA,WAAW,CAAXA,IAAAA,CAAAA,WAAAA;AACAE,IAAAA,cAAc,CAAdA,IAAAA,CAAAA,WAAAA;AAJFD,GAAAA;AAMA,SAAA,cAAA;AAGF;;AACO,SAAA,WAAA,CAAA,MAAA,EAAA,GAAA,EAAkD;AACvD,SAAOK,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAP,GAAOA,CAAP;AACD;;AAEM,SAAA,SAAA,GAA8B;AAEnC,SAAOC,WAAW,CAAA,MAAA,EAAXA,SAAW,CAAXA,IAAkC,CAAC,CAACC,OAAO,CAAPA,GAAAA,CAA3C,cAAA;AACD;;AAEM,SAAA,UAAA,CAAA,GAAA,EAAiC;AACtC,6CAAA,GAAA;AAGF;;AAEO,SAAA,QAAA,GAA6B;AAAA,MAAA,OAAA;;AAElC,SAAO,CAAC,EAAA,CAAA,OAAA,GAAA,MAAA,MAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,IAACC,OAAAA,CAAT,qBAAQ,CAAR;AACD;;AAEM,SAAA,+BAAA,GAAoD;AACzD,yBAA6BZ,SAAS,CAATA,KAAAA,CAA7B,GAA6BA,CAA7B;AAAA;AAAA,MAAM,QAAN;AAAA,MAAM,QAAN;;AACA,MAAMa,KAAK,GAAGC,MAAM,CAANA,QAAAA,CAAd,QAAcA,CAAd;AACA,MAAMC,KAAK,GAAGD,MAAM,CAANA,QAAAA,CAH2C,QAG3CA,CAAd;AAGA,SAAOC,KAAK,IAALA,EAAAA,IAAeF,KAAK,GAA3B,CAAA;AACD;;AAEM,SAAA,wBAAA,GAA6C;AAGlD,SAAO,CAAED,MAAD,CAAD,kBAAA,IAAwCA,MAAD,CAA9C,aAAA;AACD","sourcesContent":["import pack from 'react-native/package.json';\n\nconst rnVersion = pack.version;\n\nexport function toArray<T>(object: T | T[]): T[] {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n\n  return object;\n}\n\nexport type withPrevAndCurrentMapFn<T, Transformed> = (\n  previous: Transformed | null,\n  current: T\n) => Transformed;\nexport function withPrevAndCurrent<T, Transformed>(\n  array: T[],\n  mapFn: withPrevAndCurrentMapFn<T, Transformed>\n): Transformed[] {\n  const previousArr: (null | Transformed)[] = [null];\n  const currentArr = [...array];\n  const transformedArr: Transformed[] = [];\n  currentArr.forEach((current, i) => {\n    const previous = previousArr[i];\n    const transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasProperty(object: object, key: string) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nexport function isJestEnv(): boolean {\n  // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;\n}\n\nexport function tagMessage(msg: string) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\n\n// helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nexport function isFabric(): boolean {\n  // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n  return !!global?.nativeFabricUIManager;\n}\n\nexport function shouldUseCodegenNativeComponent(): boolean {\n  const [majorStr, minorStr] = rnVersion.split('.');\n  const major = Number.parseInt(majorStr);\n  const minor = Number.parseInt(minorStr);\n\n  // use codegenNativeComponent starting with RN 0.68\n  return minor >= 68 || major > 0;\n}\n\nexport function isRemoteDebuggingEnabled(): boolean {\n  // react-native-reanimated checks if in remote debugging in the same way\n  // @ts-ignore global is available but node types are not included\n  return !(global as any).nativeCallSyncHook || (global as any).__REMOTEDEV__;\n}\n"]},"metadata":{},"sourceType":"script"}