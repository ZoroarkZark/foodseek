{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedCond = createAnimatedCond;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _AnimatedBlock = require(\"../core/AnimatedBlock\");\n\nvar _val = require(\"../val\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedCond = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedCond, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedCond);\n\n  function AnimatedCond(condition, ifBlock, elseBlock) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedCond);\n    (0, _invariant.default)(condition instanceof _AnimatedNode2.default, \"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \" + condition);\n    (0, _invariant.default)(ifBlock instanceof _AnimatedNode2.default, \"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \" + ifBlock);\n    (0, _invariant.default)(elseBlock instanceof _AnimatedNode2.default || elseBlock === undefined, \"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \" + elseBlock);\n    _this = _super.call(this, {\n      type: 'cond',\n      cond: condition,\n      ifBlock: ifBlock,\n      elseBlock: elseBlock\n    }, [condition, ifBlock, elseBlock]);\n    _this._condition = condition;\n    _this._ifBlock = ifBlock;\n    _this._elseBlock = elseBlock;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedCond, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCond, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if ((0, _val.val)(this._condition)) {\n        return (0, _val.val)(this._ifBlock);\n      } else {\n        return this._elseBlock !== undefined ? (0, _val.val)(this._elseBlock) : undefined;\n      }\n    }\n  }]);\n  return AnimatedCond;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond((0, _AnimatedBlock.adapt)(cond), (0, _AnimatedBlock.adapt)(ifBlock), elseBlock === undefined ? undefined : (0, _AnimatedBlock.adapt)(elseBlock));\n}","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js"],"names":["AnimatedCond","condition","ifBlock","elseBlock","AnimatedNode","undefined","type","cond","_condition","_ifBlock","_elseBlock","__nodeID","createAnimatedCond"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;IAEMA,Y;;;;;AAKJ,wBAAYC,SAAZ,EAAuBC,OAAvB,EAAgCC,SAAhC,EAA2C;AAAA;;AAAA;AACzC,4BACEF,SAAS,YAAYG,sBADvB,4FAE0FH,SAF1F;AAIA,4BACEC,OAAO,YAAYE,sBADrB,6FAE2FF,OAF3F;AAIA,4BACEC,SAAS,YAAYC,sBAArB,IAAqCD,SAAS,KAAKE,SADrD,mHAEiHF,SAFjH;AAIA,8BACE;AACEG,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAEN,SAFR;AAGEC,MAAAA,OAAO,EAAPA,OAHF;AAIEC,MAAAA,SAAS,EAATA;AAJF,KADF,EAOE,CAACF,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAPF;AASA,UAAKK,UAAL,GAAkBP,SAAlB;AACA,UAAKQ,QAAL,GAAgBP,OAAhB;AACA,UAAKQ,UAAL,GAAkBP,SAAlB;AAxByC;AAyB1C;;;;WAED,oBAAW;AACT,oCAA4B,KAAKQ,QAAjC;AACD;;;WAED,wBAAe;AACb,UAAI,cAAI,KAAKH,UAAT,CAAJ,EAA0B;AACxB,eAAO,cAAI,KAAKC,QAAT,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKC,UAAL,KAAoBL,SAApB,GAAgC,cAAI,KAAKK,UAAT,CAAhC,GAAuDL,SAA9D;AACD;AACF;;;EA1CwBD,sB;;AA6CpB,SAASQ,kBAAT,CAA4BL,IAA5B,EAAkCL,OAAlC,EAA2CC,SAA3C,EAAsD;AAC3D,SAAO,IAAIH,YAAJ,CACL,0BAAMO,IAAN,CADK,EAEL,0BAAML,OAAN,CAFK,EAGLC,SAAS,KAAKE,SAAd,GAA0BA,SAA1B,GAAsC,0BAAMF,SAAN,CAHjC,CAAP;AAKD","sourcesContent":["import invariant from 'invariant';\r\nimport { adapt } from '../core/AnimatedBlock';\r\nimport { val } from '../val';\r\nimport AnimatedNode from './AnimatedNode';\r\n\r\nclass AnimatedCond extends AnimatedNode {\r\n  _condition;\r\n  _ifBlock;\r\n  _elseBlock;\r\n\r\n  constructor(condition, ifBlock, elseBlock) {\r\n    invariant(\r\n      condition instanceof AnimatedNode,\r\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\r\n    );\r\n    invariant(\r\n      ifBlock instanceof AnimatedNode,\r\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\r\n    );\r\n    invariant(\r\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\r\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\r\n    );\r\n    super(\r\n      {\r\n        type: 'cond',\r\n        cond: condition,\r\n        ifBlock,\r\n        elseBlock,\r\n      },\r\n      [condition, ifBlock, elseBlock]\r\n    );\r\n    this._condition = condition;\r\n    this._ifBlock = ifBlock;\r\n    this._elseBlock = elseBlock;\r\n  }\r\n\r\n  toString() {\r\n    return `AnimatedCond, id: ${this.__nodeID}`;\r\n  }\r\n\r\n  __onEvaluate() {\r\n    if (val(this._condition)) {\r\n      return val(this._ifBlock);\r\n    } else {\r\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\r\n    }\r\n  }\r\n}\r\n\r\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\r\n  return new AnimatedCond(\r\n    adapt(cond),\r\n    adapt(ifBlock),\r\n    elseBlock === undefined ? undefined : adapt(elseBlock)\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"script"}