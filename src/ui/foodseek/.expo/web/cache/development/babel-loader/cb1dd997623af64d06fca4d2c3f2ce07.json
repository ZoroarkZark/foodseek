{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTheme = exports.ThemeProvider = exports.ThemeContext = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _colors = require(\"../constants/colors\");\n\nvar _useCachedResources = _interopRequireDefault(require(\"../hooks/useCachedResources\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-rapi-ui\\\\provider\\\\ThemeProvider.tsx\";\n\nvar ThemeContext = _react.default.createContext({\n  theme: \"light\",\n  setTheme: function setTheme(theme) {\n    return console.warn(\"no theme provider\");\n  }\n});\n\nexports.ThemeContext = ThemeContext;\n\nvar useTheme = function useTheme() {\n  return _react.default.useContext(ThemeContext);\n};\n\nexports.useTheme = useTheme;\n\nvar ThemeProvider = function ThemeProvider(props) {\n  var _React$useState = _react.default.useState(props.theme || \"light\"),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      theme = _React$useState2[0],\n      setTheme = _React$useState2[1];\n\n  var isLoadingComplete = (0, _useCachedResources.default)(props.images, props.fonts);\n  var isDarkmode = theme === \"dark\";\n  return _react.default.createElement(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      isDarkmode: isDarkmode,\n      setTheme: setTheme\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.StatusBar, {\n    backgroundColor: _colors.component[theme].statusBar.color,\n    barStyle: isDarkmode ? \"light-content\" : \"dark-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    style: {\n      backgroundColor: isDarkmode ? _colors.themeColor.dark : _colors.themeColor.white100\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, !isLoadingComplete ? props.loading ? props.loading : null : props.children));\n};\n\nexports.ThemeProvider = ThemeProvider;","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-rapi-ui/provider/ThemeProvider.tsx"],"names":["ThemeContext","React","createContext","theme","setTheme","console","warn","useTheme","useContext","ThemeProvider","props","useState","isLoadingComplete","images","fonts","isDarkmode","component","statusBar","color","backgroundColor","themeColor","dark","white100","loading","children"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;AAUA,IAAMA,YAAY,GAAGC,eAAMC,aAAN,CAAkC;AACrDC,EAAAA,KAAK,EAAE,OAD8C;AAErDC,EAAAA,QAAQ,EAAE,kBAACD,KAAD;AAAA,WAAWE,OAAO,CAACC,IAAR,CAAa,mBAAb,CAAX;AAAA;AAF2C,CAAlC,CAArB;;;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAMN,eAAMO,UAAN,CAAiBR,YAAjB,CAAN;AAAA,CAAjB;;;;AAEA,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAOhB;AACJ,wBAA0BT,eAAMU,QAAN,CACxBD,KAAK,CAACP,KAAN,IAAe,OADS,CAA1B;AAAA;AAAA,MAAOA,KAAP;AAAA,MAAcC,QAAd;;AAGA,MAAMQ,iBAAiB,GAAG,iCAAmBF,KAAK,CAACG,MAAzB,EAAiCH,KAAK,CAACI,KAAvC,CAA1B;AACA,MAAMC,UAAU,GAAGZ,KAAK,KAAK,MAA7B;AAEA,SACE,6BAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAALA,KAAF;AAASY,MAAAA,UAAU,EAAVA,UAAT;AAAqBX,MAAAA,QAAQ,EAARA;AAArB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,sBAAD;AACE,IAAA,eAAe,EAAEY,kBAAUb,KAAV,EAAiBc,SAAjB,CAA2BC,KAD9C;AAEE,IAAA,QAAQ,EAAEH,UAAU,GAAG,eAAH,GAAqB,cAF3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,6BAAC,4CAAD;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,eAAe,EAAEJ,UAAU,GAAGK,mBAAWC,IAAd,GAAqBD,mBAAWE;AADtD,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAACV,iBAAD,GACGF,KAAK,CAACa,OAAN,GACEb,KAAK,CAACa,OADR,GAEE,IAHL,GAIGb,KAAK,CAACc,QATZ,CALF,CADF;AAmBD,CAjCD","sourcesContent":["import React from \"react\";\r\nimport { StatusBar } from \"react-native\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport { component, themeColor } from \"../constants/colors\";\r\nimport useCachedResources from \"../hooks/useCachedResources\";\r\n\r\ntype ContextProps = {\r\n  theme: \"light\" | \"dark\";\r\n  setTheme: (theme: \"light\" | \"dark\") => void;\r\n  isDarkmode?: boolean;\r\n  images?: Array<any> | null;\r\n  fonts?: any;\r\n};\r\n\r\nconst ThemeContext = React.createContext<ContextProps>({\r\n  theme: \"light\",\r\n  setTheme: (theme) => console.warn(\"no theme provider\"),\r\n});\r\n\r\nconst useTheme = () => React.useContext(ThemeContext);\r\n\r\nconst ThemeProvider = (props: {\r\n  theme?: \"light\" | \"dark\";\r\n  isDarkmode?: boolean;\r\n  images?: Array<any> | null;\r\n  fonts?: any;\r\n  children?: React.ReactNode;\r\n  loading?: React.ReactNode;\r\n}) => {\r\n  const [theme, setTheme] = React.useState<\"light\" | \"dark\">(\r\n    props.theme || \"light\"\r\n  );\r\n  const isLoadingComplete = useCachedResources(props.images, props.fonts);\r\n  const isDarkmode = theme === \"dark\";\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, isDarkmode, setTheme }}>\r\n      <StatusBar\r\n        backgroundColor={component[theme].statusBar.color}\r\n        barStyle={isDarkmode ? \"light-content\" : \"dark-content\"}\r\n      />\r\n      <SafeAreaProvider\r\n        style={{\r\n          backgroundColor: isDarkmode ? themeColor.dark : themeColor.white100,\r\n        }}\r\n      >\r\n        {!isLoadingComplete\r\n          ? props.loading\r\n            ? props.loading\r\n            : null\r\n          : props.children}\r\n      </SafeAreaProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThemeProvider, ThemeContext, useTheme, ContextProps };\r\n"]},"metadata":{},"sourceType":"script"}