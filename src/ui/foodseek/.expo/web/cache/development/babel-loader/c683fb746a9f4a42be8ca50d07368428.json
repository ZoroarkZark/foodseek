{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SI = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar default_options = {\n  host: \"localhost\",\n  port: 3000\n};\n\nfunction getPath(host, port, path) {\n  return \"http://\" + host + \":\" + port + path;\n}\n\nvar ServerInterface = function () {\n  function ServerInterface() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck2.default)(this, ServerInterface);\n    this.state = \"stateful\";\n    this.host = \"localhost\";\n    this.port = 3000;\n    this.auth = \"\";\n  }\n\n  (0, _createClass2.default)(ServerInterface, [{\n    key: \"setHost\",\n    value: function setHost(host) {\n      this.opt.host = host;\n    }\n  }, {\n    key: \"setPot\",\n    value: function setPot(port) {\n      this.opt.port = port;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      console.log(this.state);\n      return this.state;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(iny) {\n      this.state = iny;\n    }\n  }, {\n    key: \"xmlTest\",\n    value: function xmlTest() {\n      var test = new XMLHttpRequest();\n      test.open(\"POST\", \"http://108.90.204.32:80/test_post\", true);\n      test.responseType = \"json\";\n      test.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n      test.timeout = 3000;\n      console.log(\"req formed\");\n      test.send(JSON.stringify({\n        bobby: \"boslay\"\n      }));\n      console.log(\" hypothetically sent the body\");\n\n      test.onload = function () {\n        console.log(\"Loaded \" + test.status + \" \" + test.response);\n      };\n\n      test.onerror = function () {\n        console.error(\"Network err \" + test.status);\n      };\n\n      test.onprogress = function (event) {\n        console.log(\"Recieved Event: \" + event.loaded + \" of \" + event.total);\n      };\n    }\n  }, {\n    key: \"signup\",\n    value: function signup() {}\n  }, {\n    key: \"login\",\n    value: function login() {}\n  }, {\n    key: \"logout\",\n    value: function logout() {}\n  }, {\n    key: \"foodlist\",\n    value: function foodlist() {}\n  }]);\n  return ServerInterface;\n}();\n\nvar SI = new ServerInterface(default_options);\nexports.SI = SI;","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/src/scripts/serverinterface.js"],"names":["default_options","host","port","getPath","path","ServerInterface","options","state","auth","opt","console","log","iny","test","XMLHttpRequest","open","responseType","setRequestHeader","timeout","send","JSON","stringify","bobby","onload","status","response","onerror","error","onprogress","event","loaded","total","SI"],"mappings":";;;;;;;;;;;AAIA,IAAMA,eAAe,GAAG;AACpBC,EAAAA,IAAI,EAAE,WADc;AAEpBC,EAAAA,IAAI,EAAE;AAFc,CAAxB;;AAKA,SAASC,OAAT,CAAiBF,IAAjB,EAAsBC,IAAtB,EAA2BE,IAA3B,EAAgC;AAC5B,qBAAiBH,IAAjB,SAAyBC,IAAzB,GAAgCE,IAAhC;AACH;;IAKKC,e;AAEF,6BAAyB;AAAA,QAAbC,OAAa,uEAAH,EAAG;AAAA;AACrB,SAAKC,KAAL,GAAa,UAAb;AAEA,SAAKN,IAAL,GAAY,WAAZ;AACA,SAAKC,IAAL,GAAY,IAAZ;AAEA,SAAKM,IAAL,GAAY,EAAZ;AAEH;;;;WAGD,iBAAQP,IAAR,EAAa;AACT,WAAKQ,GAAL,CAASR,IAAT,GAAgBA,IAAhB;AACH;;;WACD,gBAAOC,IAAP,EAAY;AACR,WAAKO,GAAL,CAASP,IAAT,GAAgBA,IAAhB;AACH;;;WAGD,oBAAU;AACNQ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB;AACA,aAAO,KAAKA,KAAZ;AACH;;;WACD,kBAASK,GAAT,EAAa;AACT,WAAKL,KAAL,GAAaK,GAAb;AACH;;;WAmCD,mBAAS;AACL,UAAIC,IAAI,GAAG,IAAIC,cAAJ,EAAX;AAEAD,MAAAA,IAAI,CAACE,IAAL,CAAU,MAAV,EAAkB,mCAAlB,EAAsD,IAAtD;AACAF,MAAAA,IAAI,CAACG,YAAL,GAAoB,MAApB;AACAH,MAAAA,IAAI,CAACI,gBAAL,CAAsB,cAAtB,EAAsC,iCAAtC;AACAJ,MAAAA,IAAI,CAACK,OAAL,GAAe,IAAf;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAE,MAAAA,IAAI,CAACM,IAAL,CACIC,IAAI,CAACC,SAAL,CAAe;AACXC,QAAAA,KAAK,EAAE;AADI,OAAf,CADJ;AAMAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;;AACAE,MAAAA,IAAI,CAACU,MAAL,GAAc,YAAM;AAChBb,QAAAA,OAAO,CAACC,GAAR,aAAsBE,IAAI,CAACW,MAA3B,SAAqCX,IAAI,CAACY,QAA1C;AACH,OAFD;;AAIAZ,MAAAA,IAAI,CAACa,OAAL,GAAe,YAAM;AACjBhB,QAAAA,OAAO,CAACiB,KAAR,kBAA6Bd,IAAI,CAACW,MAAlC;AACH,OAFD;;AAIAX,MAAAA,IAAI,CAACe,UAAL,GAAkB,UAACC,KAAD,EAAW;AACzBnB,QAAAA,OAAO,CAACC,GAAR,sBAA+BkB,KAAK,CAACC,MAArC,YAAkDD,KAAK,CAACE,KAAxD;AACH,OAFD;AAIH;;;WAED,kBAAQ,CAAE;;;WAEV,iBAAO,CAAE;;;WAET,kBAAQ,CAAE;;;WAEV,oBAAU,CAAE;;;;;AAST,IAAMC,EAAE,GAAG,IAAI3B,eAAJ,CAAoBL,eAApB,CAAX","sourcesContent":["// Going to use fetch to make requests to our server\r\n\r\n// default options to pass to server\r\n// this will most likely end up in a .env somewhere\r\nconst default_options = {\r\n    host: \"localhost\",\r\n    port: 3000,\r\n}\r\n\r\nfunction getPath(host,port,path){\r\n    return `http://${host}:${port}${path}`;\r\n}\r\n\r\n//Server Interface class\r\n// This represents the device essentially\r\n// It will be responsible for performing requests for the user\r\nclass ServerInterface{\r\n    // default constructor has no options and should be set at somepoint\r\n    constructor(options = {}){\r\n        this.state = \"stateful\"; // temp var just to show we have access to this instantiated class in multiple pages\r\n        \r\n        this.host = \"localhost\"; // these two should most likely become .env variables or what ever .env == in mobile app dev\r\n        this.port = 3000;\r\n\r\n        this.auth = \"\"; // auth cookie (initially null until a user signs in)\r\n\r\n    }\r\n\r\n    // set items\r\n    setHost(host){\r\n        this.opt.host = host;\r\n    }\r\n    setPot(port){\r\n        this.opt.port = port;\r\n    }\r\n\r\n    // backwards compat for example\r\n    getState(){\r\n        console.log(this.state);\r\n        return this.state\r\n    }\r\n    setState(iny){\r\n        this.state = iny;\r\n    }\r\n\r\n\r\n    //Actual Fetch code\r\n    // all of this needs to be Async bc its http requests\r\n    /*\r\n    async fetchTest(){\r\n        let resource = new URL(\"http://108.90.204.32:80/test_post\") // URL\r\n        console.log(resource);\r\n        //Options for request (sends the body as well)\r\n        let options  = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': `application/json`\r\n                },\r\n                body: JSON.stringify({\r\n                    test: \"1234caliscool1234\"\r\n                })\r\n        }\r\n\r\n        console.log(\"pre request\");\r\n        \r\n        const req = await fetch(resource,options)\r\n        req.then((response) => response.json())\r\n        req.then( (json) => {\r\n            console.log('succ:',json);\r\n        })\r\n        .catch( (err) => {\r\n            console.debug(err);\r\n        });\r\n\r\n        console.log(\"after request\");\r\n    }\r\n    */\r\n   // possibly god tier other built in request module \r\n    xmlTest(){\r\n        let test = new XMLHttpRequest(); // request object \r\n\r\n        test.open(\"POST\", \"http://108.90.204.32:80/test_post\",true); // create little baby connection\r\n        test.responseType = \"json\"; // what we expect to recieve\r\n        test.setRequestHeader('Content-type', 'application/json; charset=utf-8'); // what we intend to send\r\n        test.timeout = 3000;\r\n        console.log(\"req formed\");\r\n        test.send(\r\n            JSON.stringify({\r\n                bobby: \"boslay\"\r\n            })\r\n        ); // send itty bitty data\r\n\r\n        console.log(\" hypothetically sent the body\");\r\n        test.onload = () => {\r\n            console.log(`Loaded ${test.status} ${test.response}`);\r\n        }  // load some itty bitty data\r\n\r\n        test.onerror = () => {\r\n            console.error(`Network err ${test.status}`);\r\n        } // rock nation\r\n\r\n        test.onprogress = (event) => {\r\n            console.log(`Recieved Event: ${event.loaded} of ${event.total}`);\r\n        }\r\n\r\n    }\r\n    //create a new account given credentials\r\n    signup(){}\r\n    // login to an existing acc given credentials\r\n    login(){}\r\n    // logout of an existing acc\r\n    logout(){}\r\n    // display a food list : should only work for users or something\r\n    foodlist(){}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport const SI = new ServerInterface(default_options);"]},"metadata":{},"sourceType":"script"}