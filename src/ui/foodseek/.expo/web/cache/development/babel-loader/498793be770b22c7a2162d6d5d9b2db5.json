{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeViewDescriptorsSet = makeViewDescriptorsSet;\nexports.makeViewsRefSet = makeViewsRefSet;\n\nvar _react = require(\"react\");\n\nvar _core = require(\"./core\");\n\nvar _PlatformChecker = require(\"./PlatformChecker\");\n\nvar scheduleUpdates = (0, _PlatformChecker.shouldBeUseWeb)() ? requestAnimationFrame : setImmediate;\n\nfunction makeViewDescriptorsSet() {\n  var ref = (0, _react.useRef)(null);\n\n  if (ref.current === null) {\n    var data = {\n      batchToRemove: new Set(),\n      tags: new Set(),\n      waitForInsertSync: false,\n      waitForRemoveSync: false,\n      sharableViewDescriptors: (0, _core.makeMutable)([]),\n      items: [],\n      add: function add(item) {\n        if (data.tags.has(item.tag)) {\n          return;\n        }\n\n        data.tags.add(item.tag);\n        data.items.push(item);\n\n        if (!data.waitForInsertSync) {\n          data.waitForInsertSync = true;\n          scheduleUpdates(function () {\n            data.sharableViewDescriptors.value = data.items;\n            data.waitForInsertSync = false;\n          });\n        }\n      },\n      remove: function remove(viewTag) {\n        data.batchToRemove.add(viewTag);\n\n        if (!data.waitForRemoveSync) {\n          data.waitForRemoveSync = true;\n          scheduleUpdates(function () {\n            var items = [];\n\n            for (var item of data.items) {\n              if (data.batchToRemove.has(item.tag)) {\n                data.tags.delete(item.tag);\n              } else {\n                items.push(item);\n              }\n            }\n\n            data.items = items;\n            data.sharableViewDescriptors.value = items;\n            data.batchToRemove = new Set();\n            data.waitForRemoveSync = false;\n          });\n        }\n      },\n      rebuildsharableViewDescriptors: function rebuildsharableViewDescriptors(sharableViewDescriptors) {\n        data.sharableViewDescriptors = sharableViewDescriptors;\n      }\n    };\n    ref.current = data;\n  }\n\n  return ref.current;\n}\n\nfunction makeViewsRefSet() {\n  var ref = (0, _react.useRef)(null);\n\n  if (ref.current === null) {\n    var data = {\n      items: new Set(),\n      add: function add(item) {\n        if (data.items.has(item)) return;\n        data.items.add(item);\n      },\n      remove: function remove(item) {\n        data.items.delete(item);\n      }\n    };\n    ref.current = data;\n  }\n\n  return ref.current;\n}","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-reanimated/lib/reanimated2/ViewDescriptorsSet.js"],"names":["scheduleUpdates","requestAnimationFrame","setImmediate","makeViewDescriptorsSet","ref","current","data","batchToRemove","Set","tags","waitForInsertSync","waitForRemoveSync","sharableViewDescriptors","items","add","item","has","tag","push","value","remove","viewTag","delete","rebuildsharableViewDescriptors","makeViewsRefSet"],"mappings":"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","sourcesContent":["import { useRef } from 'react';\r\nimport { makeMutable } from './core';\r\nimport { shouldBeUseWeb } from './PlatformChecker';\r\nconst scheduleUpdates = shouldBeUseWeb() ? requestAnimationFrame : setImmediate;\r\nexport function makeViewDescriptorsSet() {\r\n    const ref = useRef(null);\r\n    if (ref.current === null) {\r\n        const data = {\r\n            batchToRemove: new Set(),\r\n            tags: new Set(),\r\n            waitForInsertSync: false,\r\n            waitForRemoveSync: false,\r\n            sharableViewDescriptors: makeMutable([]),\r\n            items: [],\r\n            add: (item) => {\r\n                if (data.tags.has(item.tag)) {\r\n                    return;\r\n                }\r\n                data.tags.add(item.tag);\r\n                data.items.push(item);\r\n                if (!data.waitForInsertSync) {\r\n                    data.waitForInsertSync = true;\r\n                    scheduleUpdates(() => {\r\n                        data.sharableViewDescriptors.value = data.items;\r\n                        data.waitForInsertSync = false;\r\n                    });\r\n                }\r\n            },\r\n            remove: (viewTag) => {\r\n                data.batchToRemove.add(viewTag);\r\n                if (!data.waitForRemoveSync) {\r\n                    data.waitForRemoveSync = true;\r\n                    scheduleUpdates(() => {\r\n                        const items = [];\r\n                        for (const item of data.items) {\r\n                            if (data.batchToRemove.has(item.tag)) {\r\n                                data.tags.delete(item.tag);\r\n                            }\r\n                            else {\r\n                                items.push(item);\r\n                            }\r\n                        }\r\n                        data.items = items;\r\n                        data.sharableViewDescriptors.value = items;\r\n                        data.batchToRemove = new Set();\r\n                        data.waitForRemoveSync = false;\r\n                    });\r\n                }\r\n            },\r\n            rebuildsharableViewDescriptors: (sharableViewDescriptors) => {\r\n                data.sharableViewDescriptors = sharableViewDescriptors;\r\n            },\r\n        };\r\n        ref.current = data;\r\n    }\r\n    return ref.current;\r\n}\r\nexport function makeViewsRefSet() {\r\n    const ref = useRef(null);\r\n    if (ref.current === null) {\r\n        const data = {\r\n            items: new Set(),\r\n            add: (item) => {\r\n                if (data.items.has(item))\r\n                    return;\r\n                data.items.add(item);\r\n            },\r\n            remove: (item) => {\r\n                data.items.delete(item);\r\n            },\r\n        };\r\n        ref.current = data;\r\n    }\r\n    return ref.current;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}