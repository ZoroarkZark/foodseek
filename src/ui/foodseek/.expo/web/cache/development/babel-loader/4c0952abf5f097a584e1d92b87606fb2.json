{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCachedResources;\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _vectorIcons = require(\"@expo/vector-icons\");\n\nvar Font = _interopRequireWildcard(require(\"expo-font\"));\n\nvar _expoAsset = require(\"expo-asset\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useCachedResources(images, fonts) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n\n    function _loadResourcesAndDataAsync() {\n      _loadResourcesAndDataAsync = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          yield Promise.all([images && _expoAsset.Asset.loadAsync(images), Font.loadAsync(Object.assign({}, _vectorIcons.Ionicons.font, {\n            Ubuntu_300Light: require('../fonts/Ubuntu_300Light.ttf'),\n            Ubuntu_300Light_Italic: require('../fonts/Ubuntu_300Light_Italic.ttf'),\n            Ubuntu_400Regular: require('../fonts/Ubuntu_400Regular.ttf'),\n            Ubuntu_400Regular_Italic: require('../fonts/Ubuntu_400Regular_Italic.ttf'),\n            Ubuntu_500Medium: require('../fonts/Ubuntu_500Medium.ttf'),\n            Ubuntu_500Medium_Italic: require('../fonts/Ubuntu_500Medium_Italic.ttf'),\n            Ubuntu_700Bold: require('../fonts/Ubuntu_700Bold.ttf'),\n            Ubuntu_700Bold_Italic: require('../fonts/Ubuntu_700Bold_Italic.ttf')\n          }, fonts))]);\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          setLoadingComplete(true);\n        }\n      });\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-rapi-ui/hooks/useCachedResources.ts"],"names":["useCachedResources","images","fonts","React","useState","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","Promise","all","Asset","loadAsync","Font","Ionicons","font","Ubuntu_300Light","require","Ubuntu_300Light_Italic","Ubuntu_400Regular","Ubuntu_400Regular_Italic","Ubuntu_500Medium","Ubuntu_500Medium_Italic","Ubuntu_700Bold","Ubuntu_700Bold_Italic","e","console","warn"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AAEe,SAASA,kBAAT,CACdC,MADc,EAEdC,KAFc,EAGb;AACD,wBAAgDC,KAAK,CAACC,QAAN,CAAe,KAAf,CAAhD;AAAA;AAAA,MAAOC,iBAAP;AAAA,MAA0BC,kBAA1B;;AAGAH,EAAAA,KAAK,CAACI,SAAN,CAAgB,YAAM;AAAA,aACNC,yBADM;AAAA;AAAA;;AAAA;AAAA,mEACrB,aAA2C;AAC1C,YAAI;AAEH,gBAAMC,OAAO,CAACC,GAAR,CAAY,CACjBT,MAAM,IAAIU,iBAAMC,SAAN,CAAgBX,MAAhB,CADO,EAEjBY,IAAI,CAACD,SAAL,mBACIE,sBAASC,IADb;AAECC,YAAAA,eAAe,EAAEC,OAAO,CAAC,8BAAD,CAFzB;AAGCC,YAAAA,sBAAsB,EAAED,OAAO,CAAC,qCAAD,CAHhC;AAICE,YAAAA,iBAAiB,EAAEF,OAAO,CAAC,gCAAD,CAJ3B;AAKCG,YAAAA,wBAAwB,EAAEH,OAAO,CAAC,uCAAD,CALlC;AAMCI,YAAAA,gBAAgB,EAAEJ,OAAO,CAAC,+BAAD,CAN1B;AAOCK,YAAAA,uBAAuB,EAAEL,OAAO,CAAC,sCAAD,CAPjC;AAQCM,YAAAA,cAAc,EAAEN,OAAO,CAAC,6BAAD,CARxB;AASCO,YAAAA,qBAAqB,EAAEP,OAAO,CAAC,oCAAD;AAT/B,aAUIf,KAVJ,EAFiB,CAAZ,CAAN;AAeA,SAjBD,CAiBE,OAAOuB,CAAP,EAAU;AAEXC,UAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;AACA,SApBD,SAoBU;AACTnB,UAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;AACD,OAzBoB;AAAA;AAAA;;AA2BrBE,IAAAA,yBAAyB;AACzB,GA5BD,EA4BG,EA5BH;AA8BA,SAAOH,iBAAP;AACA","sourcesContent":["import * as React from 'react';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport * as Font from 'expo-font';\r\n\r\nimport { Asset } from 'expo-asset';\r\n\r\nexport default function useCachedResources(\r\n\timages?: Array<any> | null,\r\n\tfonts?: any\r\n) {\r\n\tconst [isLoadingComplete, setLoadingComplete] = React.useState(false);\r\n\r\n\t// Load any resources or data that we need prior to rendering the app\r\n\tReact.useEffect(() => {\r\n\t\tasync function loadResourcesAndDataAsync() {\r\n\t\t\ttry {\r\n\t\t\t\t// Load fonts\r\n\t\t\t\tawait Promise.all([\r\n\t\t\t\t\timages && Asset.loadAsync(images),\r\n\t\t\t\t\tFont.loadAsync({\r\n\t\t\t\t\t\t...Ionicons.font,\r\n\t\t\t\t\t\tUbuntu_300Light: require('../fonts/Ubuntu_300Light.ttf'),\r\n\t\t\t\t\t\tUbuntu_300Light_Italic: require('../fonts/Ubuntu_300Light_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_400Regular: require('../fonts/Ubuntu_400Regular.ttf'),\r\n\t\t\t\t\t\tUbuntu_400Regular_Italic: require('../fonts/Ubuntu_400Regular_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_500Medium: require('../fonts/Ubuntu_500Medium.ttf'),\r\n\t\t\t\t\t\tUbuntu_500Medium_Italic: require('../fonts/Ubuntu_500Medium_Italic.ttf'),\r\n\t\t\t\t\t\tUbuntu_700Bold: require('../fonts/Ubuntu_700Bold.ttf'),\r\n\t\t\t\t\t\tUbuntu_700Bold_Italic: require('../fonts/Ubuntu_700Bold_Italic.ttf'),\r\n\t\t\t\t\t\t...fonts,\r\n\t\t\t\t\t}),\r\n\t\t\t\t]);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// We might want to provide this error information to an error reporting service\r\n\t\t\t\tconsole.warn(e);\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoadingComplete(true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloadResourcesAndDataAsync();\r\n\t}, []);\r\n\r\n\treturn isLoadingComplete;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}