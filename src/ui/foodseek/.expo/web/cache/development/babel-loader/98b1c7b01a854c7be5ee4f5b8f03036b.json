{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _colors = require(\"../../constants/colors\");\n\nvar _ThemeProvider = require(\"../../provider/ThemeProvider\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-rapi-ui\\\\components\\\\RadioButton\\\\RadioButton.tsx\";\n\nvar RadioButton = function RadioButton(_ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? false : _ref$value,\n      onValueChange = _ref.onValueChange,\n      checkedColor = _ref.checkedColor,\n      uncheckedColor = _ref.uncheckedColor,\n      _ref$inverseColor = _ref.inverseColor,\n      inverseColor = _ref$inverseColor === void 0 ? _colors.themeColor.white : _ref$inverseColor,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      style = _ref.style;\n\n  var _useTheme = (0, _ThemeProvider.useTheme)(),\n      theme = _useTheme.theme;\n\n  var selectedCheckedColor = checkedColor ? checkedColor : _colors.component[theme].checkBox.checkedColor;\n  var selectedUncheckedColor = uncheckedColor ? uncheckedColor : _colors.component[theme].checkBox.uncheckedColor;\n\n  var handleChange = function handleChange() {\n    if (onValueChange) {\n      onValueChange(!value);\n    }\n  };\n\n  return _react.default.createElement(_reactNative.TouchableOpacity, {\n    onPress: handleChange,\n    style: Object.assign({}, style, {\n      width: size,\n      height: size,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      borderRadius: size / 2,\n      borderColor: value ? selectedCheckedColor : selectedUncheckedColor,\n      backgroundColor: disabled ? _colors.component[theme].checkBox.disabledColor : value ? selectedCheckedColor : \"transparent\",\n      borderWidth: 1\n    }),\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, value && _react.default.createElement(_reactNative.View, {\n    style: {\n      width: size - 4,\n      height: size - 4,\n      borderRadius: (size - 4) / 2,\n      borderWidth: 4,\n      borderColor: disabled ? inverseColor : value ? inverseColor : selectedUncheckedColor,\n      backgroundColor: disabled ? _colors.component[theme].checkBox.disabledColor : value ? selectedCheckedColor : \"transparent\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar _default = RadioButton;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-rapi-ui/components/RadioButton/RadioButton.tsx"],"names":["RadioButton","value","onValueChange","checkedColor","uncheckedColor","inverseColor","themeColor","white","disabled","size","style","theme","selectedCheckedColor","component","checkBox","selectedUncheckedColor","handleChange","width","height","alignItems","justifyContent","borderRadius","borderColor","backgroundColor","disabledColor","borderWidth"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;AAaA,IAAMA,WAA4B,GAAG,SAA/BA,WAA+B,OAS/B;AAAA,wBARJC,KAQI;AAAA,MARJA,KAQI,2BARI,KAQJ;AAAA,MAPJC,aAOI,QAPJA,aAOI;AAAA,MANJC,YAMI,QANJA,YAMI;AAAA,MALJC,cAKI,QALJA,cAKI;AAAA,+BAJJC,YAII;AAAA,MAJJA,YAII,kCAJWC,mBAAWC,KAItB;AAAA,2BAHJC,QAGI;AAAA,MAHJA,QAGI,8BAHO,KAGP;AAAA,uBAFJC,IAEI;AAAA,MAFJA,IAEI,0BAFG,EAEH;AAAA,MADJC,KACI,QADJA,KACI;;AACJ,kBAAkB,8BAAlB;AAAA,MAAQC,KAAR,aAAQA,KAAR;;AACA,MAAMC,oBAAoB,GAAGT,YAAY,GACrCA,YADqC,GAErCU,kBAAUF,KAAV,EAAiBG,QAAjB,CAA0BX,YAF9B;AAGA,MAAMY,sBAAsB,GAAGX,cAAc,GACzCA,cADyC,GAEzCS,kBAAUF,KAAV,EAAiBG,QAAjB,CAA0BV,cAF9B;;AAGA,MAAMY,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAId,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAAC,CAACD,KAAF,CAAb;AACD;AACF,GAJD;;AAMA,SACE,6BAAC,6BAAD;AACE,IAAA,OAAO,EAAEe,YADX;AAEE,IAAA,KAAK,oBACAN,KADA;AAEHO,MAAAA,KAAK,EAAER,IAFJ;AAGHS,MAAAA,MAAM,EAAET,IAHL;AAIHU,MAAAA,UAAU,EAAE,QAJT;AAKHC,MAAAA,cAAc,EAAE,QALb;AAMHC,MAAAA,YAAY,EAAEZ,IAAI,GAAG,CANlB;AAOHa,MAAAA,WAAW,EAAErB,KAAK,GAAGW,oBAAH,GAA0BG,sBAPzC;AAQHQ,MAAAA,eAAe,EAAEf,QAAQ,GACrBK,kBAAUF,KAAV,EAAiBG,QAAjB,CAA0BU,aADL,GAErBvB,KAAK,GACLW,oBADK,GAEL,aAZD;AAaHa,MAAAA,WAAW,EAAE;AAbV,MAFP;AAiBE,IAAA,QAAQ,EAAEjB,QAjBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmBGP,KAAK,IACJ,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLgB,MAAAA,KAAK,EAAER,IAAI,GAAG,CADT;AAELS,MAAAA,MAAM,EAAET,IAAI,GAAG,CAFV;AAGLY,MAAAA,YAAY,EAAE,CAACZ,IAAI,GAAG,CAAR,IAAa,CAHtB;AAILgB,MAAAA,WAAW,EAAE,CAJR;AAKLH,MAAAA,WAAW,EAAEd,QAAQ,GACjBH,YADiB,GAEjBJ,KAAK,GACLI,YADK,GAELU,sBATC;AAULQ,MAAAA,eAAe,EAAEf,QAAQ,GACrBK,kBAAUF,KAAV,EAAiBG,QAAjB,CAA0BU,aADL,GAErBvB,KAAK,GACLW,oBADK,GAEL;AAdC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBJ,CADF;AA0CD,CAjED;;eAmEeZ,W","sourcesContent":["import React from \"react\";\r\nimport { ColorValue, TouchableOpacity, View, ViewStyle } from \"react-native\";\r\nimport { component, themeColor } from \"../../constants/colors\";\r\nimport { useTheme } from \"../../provider/ThemeProvider\";\r\n\r\ninterface Props {\r\n  value: boolean;\r\n  onValueChange?: (newValue: boolean) => void;\r\n  checkedColor?: ColorValue;\r\n  uncheckedColor?: ColorValue;\r\n  inverseColor?: ColorValue;\r\n  disabled?: boolean;\r\n  style?: ViewStyle;\r\n  size?: number;\r\n}\r\n\r\nconst RadioButton: React.FC<Props> = ({\r\n  value = false,\r\n  onValueChange,\r\n  checkedColor,\r\n  uncheckedColor,\r\n  inverseColor = themeColor.white,\r\n  disabled = false,\r\n  size = 24,\r\n  style,\r\n}) => {\r\n  const { theme } = useTheme();\r\n  const selectedCheckedColor = checkedColor\r\n    ? checkedColor\r\n    : component[theme].checkBox.checkedColor;\r\n  const selectedUncheckedColor = uncheckedColor\r\n    ? uncheckedColor\r\n    : component[theme].checkBox.uncheckedColor;\r\n  const handleChange = () => {\r\n    if (onValueChange) {\r\n      onValueChange(!value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      onPress={handleChange}\r\n      style={{\r\n        ...style,\r\n        width: size,\r\n        height: size,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        borderRadius: size / 2,\r\n        borderColor: value ? selectedCheckedColor : selectedUncheckedColor,\r\n        backgroundColor: disabled\r\n          ? component[theme].checkBox.disabledColor\r\n          : value\r\n          ? selectedCheckedColor\r\n          : \"transparent\",\r\n        borderWidth: 1,\r\n      }}\r\n      disabled={disabled}\r\n    >\r\n      {value && (\r\n        <View\r\n          style={{\r\n            width: size - 4,\r\n            height: size - 4,\r\n            borderRadius: (size - 4) / 2,\r\n            borderWidth: 4,\r\n            borderColor: disabled\r\n              ? inverseColor\r\n              : value\r\n              ? inverseColor\r\n              : selectedUncheckedColor,\r\n            backgroundColor: disabled\r\n              ? component[theme].checkBox.disabledColor\r\n              : value\r\n              ? selectedCheckedColor\r\n              : \"transparent\",\r\n          }}\r\n        />\r\n      )}\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nexport default RadioButton;\r\n"]},"metadata":{},"sourceType":"script"}