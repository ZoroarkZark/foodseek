{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interpolateSharableColor = exports.interpolateColor = exports.ColorSpace = void 0;\nexports.useInterpolateConfig = useInterpolateConfig;\n\nvar _Colors = require(\"./Colors\");\n\nvar _core = require(\"./core\");\n\nvar _interpolation = require(\"./interpolation\");\n\nvar _derived = require(\"../reanimated1/derived\");\n\nvar _useSharedValue = require(\"./hook/useSharedValue\");\n\nvar interpolateColorsHSV = function () {\n  var _f = function _f(value, inputRange, colors) {\n    var h = (0, _interpolation.interpolate)(value, inputRange, colors.h, _derived.Extrapolate.CLAMP);\n    var s = (0, _interpolation.interpolate)(value, inputRange, colors.s, _derived.Extrapolate.CLAMP);\n    var v = (0, _interpolation.interpolate)(value, inputRange, colors.v, _derived.Extrapolate.CLAMP);\n    return (0, _Colors.hsvToColor)(h, s, v);\n  };\n\n  _f._closure = {\n    interpolate: _interpolation.interpolate,\n    Extrapolate: {\n      CLAMP: _derived.Extrapolate.CLAMP\n    },\n    hsvToColor: _Colors.hsvToColor\n  };\n  _f.asString = \"function _f(value,inputRange,colors){const{interpolate,Extrapolate,hsvToColor}=jsThis._closure;{const h=interpolate(value,inputRange,colors.h,Extrapolate.CLAMP);const s=interpolate(value,inputRange,colors.s,Extrapolate.CLAMP);const v=interpolate(value,inputRange,colors.v,Extrapolate.CLAMP);return hsvToColor(h,s,v);}}\";\n  _f.__workletHash = 8523421253831;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (7:29)\";\n  return _f;\n}();\n\nvar interpolateColorsRGB = function () {\n  var _f = function _f(value, inputRange, colors) {\n    var r = (0, _interpolation.interpolate)(value, inputRange, colors.r, _derived.Extrapolate.CLAMP);\n    var g = (0, _interpolation.interpolate)(value, inputRange, colors.g, _derived.Extrapolate.CLAMP);\n    var b = (0, _interpolation.interpolate)(value, inputRange, colors.b, _derived.Extrapolate.CLAMP);\n    var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, _derived.Extrapolate.CLAMP);\n    return (0, _Colors.rgbaColor)(r, g, b, a);\n  };\n\n  _f._closure = {\n    interpolate: _interpolation.interpolate,\n    Extrapolate: {\n      CLAMP: _derived.Extrapolate.CLAMP\n    },\n    rgbaColor: _Colors.rgbaColor\n  };\n  _f.asString = \"function _f(value,inputRange,colors){const{interpolate,Extrapolate,rgbaColor}=jsThis._closure;{const r=interpolate(value,inputRange,colors.r,Extrapolate.CLAMP);const g=interpolate(value,inputRange,colors.g,Extrapolate.CLAMP);const b=interpolate(value,inputRange,colors.b,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);return rgbaColor(r,g,b,a);}}\";\n  _f.__workletHash = 9163961585023;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (14:29)\";\n  return _f;\n}();\n\nvar getInterpolateRGB = function () {\n  var _f = function _f(colors) {\n    var r = [];\n    var g = [];\n    var b = [];\n    var a = [];\n\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = (0, _Colors.processColor)(color);\n\n      if (processedColor !== null && processedColor !== undefined) {\n        r.push((0, _Colors.red)(processedColor));\n        g.push((0, _Colors.green)(processedColor));\n        b.push((0, _Colors.blue)(processedColor));\n        a.push((0, _Colors.opacity)(processedColor));\n      }\n    }\n\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  };\n\n  _f._closure = {\n    processColor: _Colors.processColor,\n    red: _Colors.red,\n    green: _Colors.green,\n    blue: _Colors.blue,\n    opacity: _Colors.opacity\n  };\n  _f.asString = \"function _f(colors){const{processColor,red,green,blue,opacity}=jsThis._closure;{const r=[];const g=[];const b=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(processedColor!==null&&processedColor!==undefined){r.push(red(processedColor));g.push(green(processedColor));b.push(blue(processedColor));a.push(opacity(processedColor));}}return{r:r,g:g,b:b,a:a};}}\";\n  _f.__workletHash = 3521870636649;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (22:26)\";\n  return _f;\n}();\n\nvar getInterpolateHSV = function () {\n  var _f = function _f(colors) {\n    var h = [];\n    var s = [];\n    var v = [];\n\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = (0, _Colors.RGBtoHSV)((0, _Colors.processColor)(color));\n\n      if (processedColor) {\n        h.push(processedColor.h);\n        s.push(processedColor.s);\n        v.push(processedColor.v);\n      }\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  };\n\n  _f._closure = {\n    RGBtoHSV: _Colors.RGBtoHSV,\n    processColor: _Colors.processColor\n  };\n  _f.asString = \"function _f(colors){const{RGBtoHSV,processColor}=jsThis._closure;{const h=[];const s=[];const v=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=RGBtoHSV(processColor(color));if(processedColor){h.push(processedColor.h);s.push(processedColor.s);v.push(processedColor.v);}}return{h:h,s:s,v:v};}}\";\n  _f.__workletHash = 1607676561695;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (41:26)\";\n  return _f;\n}();\n\nvar interpolateColor = function () {\n  var _f = function _f(value, inputRange, outputRange) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n\n    if (colorSpace === 'HSV') {\n      return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\n    } else if (colorSpace === 'RGB') {\n      return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\n    }\n\n    throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n\n  _f._closure = {\n    interpolateColorsHSV: interpolateColorsHSV,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateRGB: getInterpolateRGB\n  };\n  _f.asString = \"function _f(value,inputRange,outputRange,colorSpace='RGB'){const{interpolateColorsHSV,getInterpolateHSV,interpolateColorsRGB,getInterpolateRGB}=jsThis._closure;{if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange));}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange));}throw new Error(\\\"Invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 3318264077187;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (57:32)\";\n  return _f;\n}();\n\nexports.interpolateColor = interpolateColor;\nvar ColorSpace;\nexports.ColorSpace = ColorSpace;\n\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (exports.ColorSpace = ColorSpace = {}));\n\nfunction useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  return (0, _useSharedValue.useSharedValue)({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: (0, _core.makeMutable)(null)\n  });\n}\n\nvar interpolateSharableColor = function () {\n  var _f = function _f(value, interpolateConfig) {\n    var colors = interpolateConfig.value.cache.value;\n\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n      if (!colors) {\n        colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n        interpolateConfig.value.cache.value = colors;\n      }\n\n      return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\n    } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n      if (!colors) {\n        colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n        interpolateConfig.value.cache.value = colors;\n      }\n\n      return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\n    }\n\n    throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n\n  _f._closure = {\n    ColorSpace: {\n      RGB: ColorSpace.RGB,\n      HSV: ColorSpace.HSV\n    },\n    getInterpolateRGB: getInterpolateRGB,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsHSV: interpolateColorsHSV\n  };\n  _f.asString = \"function _f(value,interpolateConfig){const{ColorSpace,getInterpolateRGB,interpolateColorsRGB,getInterpolateHSV,interpolateColorsHSV}=jsThis._closure;{let colors=interpolateConfig.value.cache.value;if(interpolateConfig.value.colorSpace===ColorSpace.RGB){if(!colors){colors=getInterpolateRGB(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsRGB(value,interpolateConfig.value.inputRange,colors);}else if(interpolateConfig.value.colorSpace===ColorSpace.HSV){if(!colors){colors=getInterpolateHSV(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsHSV(value,interpolateConfig.value.inputRange,colors);}throw new Error(\\\"Invalid color space provided: \\\"+interpolateConfig.value.colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 16600294824445;\n  _f.__location = \"C:\\\\Users\\\\Mr. REEETARD\\\\Desktop\\\\FoodSeek\\\\foodseek\\\\src\\\\ui\\\\foodseek\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (80:40)\";\n  return _f;\n}();\n\nexports.interpolateSharableColor = interpolateSharableColor;","map":{"version":3,"sources":["C:/Users/Mr. REEETARD/Desktop/FoodSeek/foodseek/src/ui/foodseek/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"],"names":["interpolateColorsHSV","value","inputRange","colors","h","Extrapolate","CLAMP","s","v","interpolate","hsvToColor","interpolateColorsRGB","r","g","b","a","rgbaColor","getInterpolateRGB","i","length","color","processedColor","undefined","push","processColor","red","green","blue","opacity","getInterpolateHSV","RGBtoHSV","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"mappings":"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","sourcesContent":["import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';\r\nimport { makeMutable } from './core';\r\nimport { interpolate } from './interpolation';\r\n// @ts-ignore JS file\r\nimport { Extrapolate } from '../reanimated1/derived';\r\nimport { useSharedValue } from './hook/useSharedValue';\r\nconst interpolateColorsHSV = (value, inputRange, colors) => {\r\n    'worklet';\r\n    const h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\r\n    const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\r\n    const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\r\n    return hsvToColor(h, s, v);\r\n};\r\nconst interpolateColorsRGB = (value, inputRange, colors) => {\r\n    'worklet';\r\n    const r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\r\n    const g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\r\n    const b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\r\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\r\n    return rgbaColor(r, g, b, a);\r\n};\r\nconst getInterpolateRGB = (colors) => {\r\n    'worklet';\r\n    const r = [];\r\n    const g = [];\r\n    const b = [];\r\n    const a = [];\r\n    for (let i = 0; i < colors.length; ++i) {\r\n        const color = colors[i];\r\n        const processedColor = processColor(color);\r\n        // explicit check in case if processedColor is 0\r\n        if (processedColor !== null && processedColor !== undefined) {\r\n            r.push(red(processedColor));\r\n            g.push(green(processedColor));\r\n            b.push(blue(processedColor));\r\n            a.push(opacity(processedColor));\r\n        }\r\n    }\r\n    return { r, g, b, a };\r\n};\r\nconst getInterpolateHSV = (colors) => {\r\n    'worklet';\r\n    const h = [];\r\n    const s = [];\r\n    const v = [];\r\n    for (let i = 0; i < colors.length; ++i) {\r\n        const color = colors[i];\r\n        const processedColor = RGBtoHSV(processColor(color));\r\n        if (processedColor) {\r\n            h.push(processedColor.h);\r\n            s.push(processedColor.s);\r\n            v.push(processedColor.v);\r\n        }\r\n    }\r\n    return { h, s, v };\r\n};\r\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\r\n    'worklet';\r\n    if (colorSpace === 'HSV') {\r\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\r\n    }\r\n    else if (colorSpace === 'RGB') {\r\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\r\n    }\r\n    throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\r\n};\r\nexport var ColorSpace;\r\n(function (ColorSpace) {\r\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\r\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\r\n})(ColorSpace || (ColorSpace = {}));\r\nexport function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB) {\r\n    return useSharedValue({\r\n        inputRange,\r\n        outputRange,\r\n        colorSpace,\r\n        cache: makeMutable(null),\r\n    });\r\n}\r\nexport const interpolateSharableColor = (value, interpolateConfig) => {\r\n    'worklet';\r\n    let colors = interpolateConfig.value.cache.value;\r\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\r\n        if (!colors) {\r\n            colors = getInterpolateRGB(interpolateConfig.value.outputRange);\r\n            interpolateConfig.value.cache.value = colors;\r\n        }\r\n        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\r\n    }\r\n    else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\r\n        if (!colors) {\r\n            colors = getInterpolateHSV(interpolateConfig.value.outputRange);\r\n            interpolateConfig.value.cache.value = colors;\r\n        }\r\n        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\r\n    }\r\n    throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}